<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WinAPI-CreateWindow</title>
      <link href="2021/10/26/CreateWindow/"/>
      <url>2021/10/26/CreateWindow/</url>
      
        <content type="html"><![CDATA[<p>注：转载自<a href="https://fishc.com.cn/forum-207-1.html">小甲鱼-鱼c论坛</a></p><h2 id="CreateWindow"><a href="#CreateWindow" class="headerlink" title="CreateWindow"></a>CreateWindow</h2><h3 id="函数功能："><a href="#函数功能：" class="headerlink" title="函数功能："></a><strong>函数功能：</strong></h3><p>CreateWindow 函数创建一个重叠式窗口、弹出式窗口或子窗口。它指定窗口类，窗口标题，窗口风格，以及窗口的初始位置及大小（可选的）。函数也指该窗口的父窗口或所属窗口（如果存在的话），及窗口的菜单。</p><p>若要使用除 CreateWindow 函数支持的风格外的扩展风格，则使用 CreateWindowEx 函数代替 CreateWindow 函数。</p><h3 id="API-函数原型："><a href="#API-函数原型：" class="headerlink" title="API 函数原型："></a><strong>API 函数原型：</strong></h3><p><em>注释：<em>In</em> 说明该参数是输入的，<em>opt</em> 说明该参数是可选参数。</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HWND WINAPI <span class="title">CreateWindow</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  LPCTSTR lpClassName,    <span class="comment">// 窗口类名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  LPCTSTR lpWindowName,   <span class="comment">// 窗口标题</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      DWORD dwStyle,          <span class="comment">// 窗口风格，或称窗口格式</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      <span class="keyword">int</span> x,                  <span class="comment">// 初始 x 坐标</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      <span class="keyword">int</span> y,                  <span class="comment">// 初始 y 坐标</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      <span class="keyword">int</span> nWidth,             <span class="comment">// 初始 x 方向尺寸</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      <span class="keyword">int</span> nHeight,            <span class="comment">// 初始 y 方向尺寸</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  HWND hWndParent,        <span class="comment">// 父窗口句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  HMENU hMenu,            <span class="comment">// 窗口菜单句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  HINSTANCE hInstance,    <span class="comment">// 程序实例句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  LPVOID lpParam          <span class="comment">// 创建参数</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数解析：</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>lpClassName</td><td>1. 窗口类名称，可以是一个指向 NULL 结束的字符串或一个整型数值 2. 如果是字符串，它指定了窗口的类名。这个类名可以是任何用函数 RegisterClass 注册的类名，或是任何预定义的控制类名 3. 如是一个整型量，它是由此前调用 theGlobalAddAtom 函数产生的全局量。这个小于 0xC000 的 16 位数必须是 lpClassName 参数字的低 16 位，该参数的高位必须是 0</td></tr><tr><td>lpWindowName</td><td>1. 窗口标题，一个指向 NULL 结束的字符串指针 2. 如果窗口风格指定了标题条，由 lpWindowName 指向的窗口标题将显示在标题条上 3. 当使用 Createwindow 函数来创建控制例如按钮，选择框和静态控制时，可使用 lpWindowName 来指定控制文本</td></tr><tr><td>dwStyle</td><td>指定创建窗口的风格（详见下方↓）</td></tr><tr><td>x</td><td>1. 指定窗口的初始水平位置（x 坐标） 2. 对一个层叠或弹出式窗口，x 参数是屏幕坐标系的窗口的左上角的初始 x 坐标 3. 对于子窗口，x 是子窗口左上角相对父窗口客户区左上角的初始 x 坐标 4. 如果该参数被设为 CW_USEDEFAULT 则系统为窗口选择缺省的左上角坐标并忽略 y 参数，CW_USEDEFAULT 只对层叠窗口有效，如果为弹出式窗口或子窗口设定，则 x 和 y 参数被设为零。</td></tr><tr><td>y</td><td>1. 指定窗口的初始垂直位置（y 坐标） 2. 对一个层叠或弹出式窗口，y 参数是屏幕坐标系的窗口的左上角的初始 y 坐标 3. 对于子窗口，y 是子窗口左上角相对父窗口客户区左上角的初始 y 坐标 4. 对于列表框，y 是列表框客户区左上角相对父窗口客户区左上角的初始 y 坐标 5. 如果层叠窗口是使用 WS_VISIBLE 风格位创建的并且 x 参数被设为 CW_USEDEFAULT，则系统将忽略 y 参数</td></tr><tr><td>nWidth</td><td>1. 以设备单元指明窗口的宽度 2. 对于层叠窗口，nWidth 的值或是屏幕坐标的窗口宽度或是 CW_USEDEFAULT 3. 若 nWidth 是 CW_USEDEFAULT，则系统为窗口选择一个默认的高度和宽度（默认宽度为从初始 x 坐标开始到屏幕的右边界，缺省高度为从初始 y 坐标开始到目标区域的顶部。)，CW_USEDEFAULT 只对层叠窗口有效，如果为弹出式窗口和子窗口设定 CW_USEDEFAULT 标志则 nWidth 和 nHeight 被设为零</td></tr><tr><td>nHeight</td><td>1. 以设备单元指明窗口的高度 2. 对于层叠窗口，nHeight 是屏幕坐标的窗口宽度 3. 若 nWidth 被设为 CW_USEDEFAULT，则系统忽略 nHeight 参数，自动为 nWidth 和 nHeight 设置默认参数</td></tr><tr><td>hWndParent</td><td>1. 指向被创建窗口的父窗口或所有者窗口的句柄 2. 若要创建一个子窗口或一个从属窗口，需提供一个有效的窗口句柄 3. 创建一个单纯的消息窗口，可以提供 HWND_MESSAGE 或提供一个己存在的消息窗口的句柄</td></tr><tr><td>hMenu</td><td>1. 指向窗口菜单句柄，或依据窗口风格指明一个子窗口标识 2. 对于层叠或弹出式窗口，hMenu 指定窗口使用的菜单：如果使用了菜单类，则 hMenu 可以为 NULL 3. 对于子窗口，hMenu 指定了该子窗口标识（一个整型量），一个对话框使用这个整型值将事件通知父类。应用程序确定子窗口标识，这个值对于相同父窗口的所有子窗口必须是唯一的</td></tr><tr><td>hInstance</td><td>与窗口相关联的模块实例的句柄</td></tr><tr><td>lpParam</td><td>1. 指向一个值的指针，该值传递给窗口 WM_CREATE 消息。该值通过在 IParam 参数中的 CREATESTRUCT 结构传递 2. 如果应用程序调用 CreateWindow 创建一个 MDI 客户窗口，则 lpParam 必须指向一个 CLIENTCREATESTRUCT 结构</td></tr></tbody></table><p><strong>dwStyle 窗口风格解析</strong></p><table><thead><tr><th><strong>窗口风格</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>WS_BORDER</td><td>创建一个带边框的窗口</td></tr><tr><td>WS_CAPTION</td><td>创建一个有标题框的窗口（包含了 WS_BODER 风格）</td></tr><tr><td>WS_CHILD</td><td>创建一个子窗口，这个风格的窗口不能拥有菜单也不能与 WS_POPUP 风格合用</td></tr><tr><td>WS_CHILDWINDOW</td><td>与 WS_CHILD 相同</td></tr><tr><td>WS_CLIPCHILDREN</td><td>当在父窗口内绘图时，排除子窗口区域，在创建父窗口时使用这个风格</td></tr><tr><td>WS_CLIPSIBLINGS</td><td>1. 排除子窗口之间的相对区域，也就是，当一个特定的窗口接收到 WM_PAINT 消息时，WS_CLIPSIBLINGS 风格将所有层叠窗口排除在绘图之外，只重绘指定的子窗口 2. 如果未指定该风格，并且子窗口是层叠的，则在重绘子窗口的客户区时，就会重绘邻近的子窗口</td></tr><tr><td>WS_DISABLED</td><td>1. 创建一个初始状态为禁止的子窗口，一个禁止状态的窗口不能接受来自用户的输入信息 2. 在窗口创建之后，可以调用 EnableWindow 函数来启用该窗口</td></tr><tr><td>WS_DLGFRAME</td><td>创建一个带对话框边框风格的窗口，这种风格的窗口不能带标题条</td></tr><tr><td>WS_GROUP</td><td>1. 指定一组“控制窗口”的第一个“控制窗口” 2. 这个“控制窗口”组由第一个“控制窗口”和随后定义的“控制窗口”组成，自第二个“控制窗口”开始每个“控制窗口”具有 WS_GROUP 风格 3. 每个组的第一个“控制窗口”带有 WS_TABSTOP 风格，从而使用户可以在组间移动 4. 用户随后可以使用光标在组内的控制间改变键盘焦点</td></tr><tr><td>WS_HSCROLL</td><td>创建一个有水平滚动条的窗口</td></tr><tr><td>WS_ICONIC</td><td>创建一个初始状态为最小化状态的窗口，与 WS_MINIMIZE 风格相同</td></tr><tr><td>WS_MAXIMIZE</td><td>创建一个初始状态为最大化状态的窗口</td></tr><tr><td>WS_MAXIMIZEBOX</td><td>创建一个具有最大化按钮的窗口，该风格不能与 WS_EX_CONTEXTHELP 风格同时出现，同时必须指定 WS_SYSMENU 风格</td></tr><tr><td>WS_MINIMIZE</td><td>创建一个初始状态为最小化状态的窗口，与 WS_ICONIC 风格相同</td></tr><tr><td>WS_MINIMIZEBOX</td><td>创建一个具有最小化按钮的窗口，该风格不能与 WS_EX_CONTEXTHELP 风格同时出现，同时必须指定 WS_SYSMENU 风格</td></tr><tr><td>WS_OVERLAPPED</td><td>产生一个层叠的窗口，一个层叠的窗口有一个标题条和一个边框，与 WS_TILED 风格相同</td></tr><tr><td>WS_OVERLAPPEDWINDOW</td><td>相当于（WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX），与 WS_TILEDWINDOW 风格相同</td></tr><tr><td>WS_POPUP</td><td>创建一个弹出式窗口，该风格不能与 WS_CHILD 风格同时使用。</td></tr><tr><td>WS_POPUPWINDOW</td><td>相当于（WS_POPUP | WS_BORDER | WS_SYSMENU），但 WS_CAPTION 和 WS_POPUPWINDOW 必须同时设定才能使窗口某单可见</td></tr><tr><td>WS_SIZEBOX</td><td>创建一个可调边框的窗口，与 WS_THICKFRAME 风格相同</td></tr><tr><td>WS_SYSMENU</td><td>创建一个在标题条上带有窗口菜单的窗口，必须同时设定 WS_CAPTION 风格</td></tr><tr><td>WS_TABSTOP</td><td>1. 创建一个“控制窗口”，在用户按下 Tab 键时可以获得键盘焦点。 2. 按下 Tab 键后使键盘焦点转移到下一具有 WS_TABSTOP 风格的“控制窗口”</td></tr><tr><td>WS_THICKFRAME</td><td>创建一个具有可调边框的窗口，与 WS_SIZEBOX 风格相同</td></tr><tr><td>WS_TILED</td><td>产生一个层叠的窗口，一个层叠的窗口有一个标题和一个边框，与 WS_OVERLAPPED 风格相同</td></tr><tr><td>WS_TILEDWINDOW</td><td>相当于（WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX），与 WS_OVERLAPPEDWINDOW 风格相同</td></tr><tr><td>WS_VISIBLE</td><td>创建一个初始状态为可见的窗口</td></tr><tr><td>WS_VSCROLL</td><td>创建一个有垂直滚动条的窗口</td></tr></tbody></table><p><strong>返回值：</strong></p><ol><li><p>如果函数成功，返回值为新窗口的句柄；</p></li><li><p>如果函数失败，返回值为 NULL。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> WinAPI文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> WinAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinAPI-WNDCLASS</title>
      <link href="2021/10/26/WNDCLASS/"/>
      <url>2021/10/26/WNDCLASS/</url>
      
        <content type="html"><![CDATA[<h2 id="WNDCLASS-结构"><a href="#WNDCLASS-结构" class="headerlink" title="WNDCLASS 结构"></a>WNDCLASS 结构</h2><p>Windows 的窗口总是基于窗口类来创建的，窗口类同时确定了处理窗口消息的窗口过程（回调函数）。</p><p>在创建应用程序窗口之前，必须调用 RegisterClass 函数来注册窗口类。该函数只需要一个参数，即指向 WNDCLASS 窗口类的指针。因为 WNDCLASS 类包含了窗口所拥有的基本属性。</p><h3 id="结构原型："><a href="#结构原型：" class="headerlink" title="结构原型："></a><strong>结构原型：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagWNDCLASSW</span> &#123;</span></span><br><span class="line">    UINT        style;</span><br><span class="line">    WNDPROC     lpfnWndProc;</span><br><span class="line">    <span class="keyword">int</span>         cbClsExtra;</span><br><span class="line">    <span class="keyword">int</span>         cbWndExtra;</span><br><span class="line">    HINSTANCE   hInstance;</span><br><span class="line">    HICON       hIcon;</span><br><span class="line">    HCURSOR     hCursor;</span><br><span class="line">    HBRUSH      hbrBackground;</span><br><span class="line">    LPCWSTR     lpszMenuName;</span><br><span class="line">    LPCWSTR     lpszClassName;</span><br><span class="line">&#125; WNDCLASSW, *PWNDCLASSW, NEAR *NPWNDCLASSW, FAR *LPWNDCLASSW;</span><br></pre></td></tr></table></figure><h3 id="成员解析："><a href="#成员解析：" class="headerlink" title="成员解析："></a><strong>成员解析：</strong></h3><table><thead><tr><th><strong>成员</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>style</td><td>指定窗口类型，各种“类风格”（详见下方↓）可以使用按位或操作符组合起来</td></tr><tr><td>lpfnWndProc</td><td>指定窗口过程（必须是回调函数）</td></tr><tr><td>cbClsExtra</td><td>预留的额外空间，一般为 0</td></tr><tr><td>cbWndExtra</td><td>预留的额外空间，一般为 0</td></tr><tr><td>hInstance</td><td>应用程序的实例句柄</td></tr><tr><td>hIcon</td><td>为所有基于该窗口类的窗口设定一个图标</td></tr><tr><td>hCursor</td><td>为所有基于该窗口类的窗口设定一个鼠标指针</td></tr><tr><td>hbrBackground</td><td>指定窗口背景色</td></tr><tr><td>lpszMenuName</td><td>指定窗口菜单</td></tr><tr><td>lpszClassName</td><td>指定窗口类名</td></tr></tbody></table><h3 id="style-类风格解析"><a href="#style-类风格解析" class="headerlink" title="style 类风格解析"></a><strong>style 类风格解析</strong></h3><table><thead><tr><th><strong>类风格</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>CS_VREDRAW</td><td>移动或者调整窗口的高度（垂直方向）时，重绘整个窗口</td></tr><tr><td>CS_HREDRAW</td><td>移动或者调整窗口的宽度（水平方向）时，重绘整个窗口</td></tr><tr><td>CS_DBLCLKS</td><td>当用户光标在窗口内双击时，允许发送双击消息给窗口过程</td></tr><tr><td>CS_OWNDC</td><td>给予每个窗口实例分配一个唯一的 DC（注意，尽管这样是很方便，但它必须慎重使用，因为每个 DC 大约要占 800 个字节的内存）</td></tr><tr><td>CS_CLASSDC</td><td>该窗口类的所有窗口实例都共享一个窗口类 DC</td></tr><tr><td>CS_PARENTDC</td><td>1. 将子窗口的裁剪区域设置到父窗口的 DC 中去，这样子窗口便可以在父窗口上绘制自身。（注意，这是子窗口从系统缓存中获取 DC，而不是使用父窗口的 DC。） 2. 指定该风格可以提高系统性能</td></tr><tr><td>CS_NOCLOSE</td><td>禁止系统菜单的关闭选项</td></tr><tr><td>CS_SAVEBITS</td><td>1. 以位图形式保存被该窗口遮挡的屏幕部分，当给窗口移动以后，系统便可以用该保存的位图恢复屏幕移动的相应部分，从而系统不用向被该窗口遮挡的窗口发送 WM_PAINT 消息 2. 该特性对于菜单类型的窗口比较合适，因为它通常是简短的显示一下之后便消失 3. 设置该特性将增加显示该窗口的时间，因为它通常要先分配保存位图的内存</td></tr><tr><td>CS_BYTEALIGNCLIENT</td><td>在字节边界上（在 x 方向上）定位窗口的用户区域的位置</td></tr><tr><td>CS_BYTEALIGNWINDOW</td><td>在字节边界上（在 x 方向上）定位窗口的位置</td></tr><tr><td>CS_GLOBALCLASS</td><td>1. 当调用 CreateWindow 或 CreateWindowEx 函数来创建窗口时允许它的 hInstance 参数和注册窗口类时传递给 RegisterClass 的 hInstance 参数不同 2. 如果不指定该风格，则这两个 hInstance 必须相同</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> WinAPI文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> WinAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinAPI-RECT</title>
      <link href="2021/10/26/RECT%20%E7%BB%93%E6%9E%84/"/>
      <url>2021/10/26/RECT%20%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>注：转载自<a href="https://fishc.com.cn/forum-207-1.html">小甲鱼-鱼c论坛</a></p><h2 id="RECT-结构"><a href="#RECT-结构" class="headerlink" title="RECT 结构"></a>RECT 结构</h2><p>RECT 结构定义了一个矩形的左上角和右下角的坐标。</p><p><strong>结构原型：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RECT</span> &#123;</span></span><br><span class="line">  LONG left;</span><br><span class="line">  LONG top;</span><br><span class="line">  LONG right;</span><br><span class="line">  LONG bottom;</span><br><span class="line">&#125; RECT, *PRECT;</span><br></pre></td></tr></table></figure><p><strong>成员解析：</strong></p><table><thead><tr><th><strong>成员</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>left</td><td>指定矩形左上角的 x 坐标</td></tr><tr><td>top</td><td>指定矩形左上角的 y 坐标</td></tr><tr><td>right</td><td>指定矩形右下角的 x 坐标</td></tr><tr><td>bottom</td><td>指定矩形右下角的 y 坐标</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> WinAPI文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> WinAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinAPI-MessageBox</title>
      <link href="2021/10/26/MessageBox/"/>
      <url>2021/10/26/MessageBox/</url>
      
        <content type="html"><![CDATA[<p>注：转载自<a href="https://fishc.com.cn/forum-207-1.html">小甲鱼-鱼c论坛</a></p><h2 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h2><h3 id="函数功能："><a href="#函数功能：" class="headerlink" title="函数功能："></a><strong>函数功能：</strong></h3><p>MessageBox 函数用于显示一个模态对话框，其中包含一个系统图标、 一组按钮和一个简短的特定于应用程序消息，如状态或错误的信息。</p><p>消息框中返回一个整数值，该值指示用户单击了哪个按钮。</p><h3 id="API-函数原型："><a href="#API-函数原型：" class="headerlink" title="API 函数原型："></a><strong>API 函数原型：</strong></h3><p><em>注释：<em>In</em> 说明该参数是输入的，<em>opt</em> 说明该参数是可选参数。</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">MessageBox</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  HWND hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  LPCTSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_opt_  LPCTSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_      UINT uType</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数解析：</strong></p><p><strong>uType参数定义解析</strong></p><table><thead><tr><th><strong>按钮</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>MB_OK</td><td>默认值，有一个“确认”按钮在里面</td></tr><tr><td>MB_YESNO</td><td>有“是”和“否”两个按钮在里面</td></tr><tr><td>MB_ABORTRETRYIGNORE</td><td>有“中止”，“重试”和“跳过”三个按钮在里面</td></tr><tr><td>MB_YESNOCANCEL</td><td>有“是”，“否”和“取消”三个按钮在里面</td></tr><tr><td>MB_RETRYCANCEL</td><td>有“重试”和“取消”两个按钮在里面</td></tr><tr><td>MB_OKCANCEL</td><td>有“确定”和“取消”两个按钮在里面</td></tr></tbody></table><table><thead><tr><th><strong>图标</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>MB_ICONEXCLAMATION</td><td>一个惊叹号出现在消息框：<img src= "/img/loading.gif" data-lazy-src="https://fishc.com.cn/data/attachment/image/000/02/50/33_400_300.jpg" alt="IC534153.png"></td></tr><tr><td>MB_ICONWARNING</td><td>一个惊叹号出现在消息框（同上）</td></tr><tr><td>MB_ICONINFORMATION</td><td>一个圆圈中小写字母i组成的图标出现在消息框：<img src= "/img/loading.gif" data-lazy-src="https://fishc.com.cn/data/attachment/image/000/02/50/30_400_300.jpg" alt="IC534154.png"></td></tr><tr><td>MB_ICONASTERISK</td><td>一个圆圈中小写字母i组成的图标出现在消息框（同上）</td></tr><tr><td>MB_ICONQUESTION</td><td>一个问题标记图标出现在消息框：<img src= "/img/loading.gif" data-lazy-src="https://fishc.com.cn/data/attachment/image/000/02/50/32_400_300.jpg" alt="IC534152.png"></td></tr><tr><td>MB_ICONSTOP</td><td>一个停止消息图标出现在消息框：<img src= "/img/loading.gif" data-lazy-src="https://fishc.com.cn/data/attachment/image/000/02/50/31_400_300.jpg" alt="IC534151.png"></td></tr><tr><td>MB_ICONERROR</td><td>一个停止消息图标出现在消息框（同上）</td></tr><tr><td>MB_ICONHAND</td><td>一个停止消息图标出现在消息框（同上）</td></tr></tbody></table><table><thead><tr><th><strong>默认按钮</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>MB_DEFBUTTON1</td><td>指定第一个按钮为默认按钮</td></tr><tr><td>MB_DEFBUTTON2</td><td>指定第二个按钮为默认按钮</td></tr><tr><td>MB_DEFBUTTON3</td><td>指定第三个按钮为默认按钮</td></tr><tr><td>MB_DEFBUTTON4</td><td>指定第四个按钮为默认按钮</td></tr></tbody></table><table><thead><tr><th><strong>消息框形态</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>MB_APPLMODAL</td><td>1. 在 hWnd 参数标识的窗口中继续工作以前，用户一定响应消息框 2. 但是，用户可以移动到其他线程的窗口且在这些窗口中工作 3. 根据应用程序中窗口的层次机构，用户则以移动到线程内的其他窗口 4. 所有母消息框的子窗口自动地失效，但是弹出窗口不是这样 5. 如果既没有指定 MB_SYSTEMMODAL 也没有指定 MB_TASKMODAL，则 MB_APPLMODAL 为默认的</td></tr><tr><td>MB_SYSTEMMODAL</td><td>1. 除了消息框有 WB_EX_TOPMOST 类型，否则 MB_APPLMODAL 和 MB_SYSTEMMODAL 一样 2. 用系统模态消息框来改变各种各样的用户，主要的损坏错误需要立即注意（例如，内存溢出） 3. 如果不是那些与 hWnd 联系的窗口，此标志对用户对窗口的相互联系没有影响</td></tr><tr><td>MB_TASKMODAL</td><td>1. 如果参数 hWnd 为 NULL 的话，那么除了所有属于当前线程高层次的窗口失效外，MB_TASKMODAL 和 MB_APPLMODAL 一样 2. 当调用应用程序或库没有一个可以得到的窗口句柄时，可以使用此标志，但仍需要阻止输入到调用线程的其他窗口，而不是搁置其他线程</td></tr></tbody></table><table><thead><tr><th><strong>其他标志</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>MB_DEFAULT_DESKTOP_ONLY</td><td>1. 接收输入的当前桌面一定是一个默认桌面，否则函数调用失败 2. 默认桌面是一个在用户已经记录且以后应用程序在此上面运行的桌面</td></tr><tr><td>MB_HELP</td><td>1. 把一个 Help 按钮增加到消息框 2. 选择 Help 按钮或按 F1 产生一个 Help 事件</td></tr><tr><td>MB_RIGHT</td><td>文本为右对齐</td></tr><tr><td>MB_RTLREADING</td><td>用在 Hebrew 和 Arabic 系统中从右到左的顺序显示消息和大写文本</td></tr><tr><td>MB_SETFOREGROUND</td><td>1. 消息框变为前景窗口 2. 在内部系统为消息个调用 SetForegroundWindow 函数</td></tr><tr><td>MB_TOPMOST</td><td>消息框用 WS_EX_TOPMOST 窗口类型来创建 MB_SERVICE_NOTIFICATION</td></tr></tbody></table><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>hWnd</td><td>1. 该消息框的父窗口句柄 2. 如果此参数为NULL，则该消息框没有拥有父窗口</td></tr><tr><td>lpText</td><td>消息框的内容</td></tr><tr><td>lpCaption</td><td>消息框的标题</td></tr><tr><td>uType</td><td>1. 指定一个决定对话框的内容和行为的位标志集 2. 此参数可以通过指定下列标志或标志的组合，来显示消息框中的按钮以及图标</td></tr></tbody></table><p><strong>返回值：</strong></p><table><thead><tr><th><strong>返回值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>IDOK</td><td>用户按下了“确认”按钮</td></tr><tr><td>IDCANCEL</td><td>用户按下了“取消”按钮</td></tr><tr><td>IDABORT</td><td>用户按下了“中止”按钮</td></tr><tr><td>IDRETRY</td><td>用户按下了“重试”按钮</td></tr><tr><td>IDIGNORE</td><td>用户按下了“忽略”按钮</td></tr><tr><td>IDYES</td><td>用户按下了“是”按钮</td></tr><tr><td>IDNO</td><td>用户按下了“否”按钮</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> WinAPI文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> WinAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化</title>
      <link href="2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
      <url>2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="更改公告内容-gif图片"><a href="#更改公告内容-gif图片" class="headerlink" title="更改公告内容+gif图片"></a>更改公告内容+gif图片</h1><p>在主题配置文件中搜索 card_announcement </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span> <span class="string">//公告内容</span></span><br></pre></td></tr></table></figure><p>更改后</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">欢迎来到yui1111的博客！&lt;img</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/rigodlee/BLOGCDN/img/20150404H5648_ZuzhL.gif&quot;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://imgtu.com/i/603iAU"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/03/14/603iAU.png" alt="603iAU.png"></a></p><h1 id="更换头像与背景图像"><a href="#更换头像与背景图像" class="headerlink" title="更换头像与背景图像"></a>更换头像与背景图像</h1><p>打开主题配置文件，搜索<code>Avatar</code>往下一排全是关于博客头像背景图片之类的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 个人博客搭建</title>
      <link href="2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="会使用到的工具"><a href="#会使用到的工具" class="headerlink" title="会使用到的工具"></a>会使用到的工具</h2><ul><li><p>node.js</p></li><li><p>sublime</p></li><li><p>git</p></li></ul><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><p>首先我们首先在node.js的<a href="https://nodejs.org/zh-cn/download/">官网</a>下载</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHuC9.png" alt="1"></p><p>使用其他平台的用户可根据自己的需求下载哦（图片为Windows平台）</p><p>下载完成后，一路next就能安装成功。</p><h4 id="检查安装情况"><a href="#检查安装情况" class="headerlink" title="检查安装情况"></a>检查安装情况</h4><ul><li><strong>node.js</strong></li></ul><p>打开Windows 命令处理程序输入node -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHm4J.png" alt="2"></p><p>出现版本号即为安装成功</p><ul><li><strong>npm</strong></li></ul><p>继续在Windows 命令处理程序输入npm -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHABT.png" alt="3"></p><p>出现版本号即为安装成功</p><h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><p>直接到<a href="http://www.sublimetext.com/3">sublime官网</a>下载。建议安装在与博客文件同一文件夹中。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="下载和安装-1"><a href="#下载和安装-1" class="headerlink" title="下载和安装"></a>下载和安装</h4><ul><li><p><strong>下载</strong></p><p>下载git可直接去git**<a href="">官网</a>**下载。进入官网后点击download。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHMg1.png" alt="4"></p></li><li><p><strong>安装</strong></p></li></ul><ol><li><p>下载完成后打开进入此界面（因为我已经安装过git所以图中下面会多显示Only show new options ）</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHQjx.png" alt="5"></p></li><li><p>安装路径——选择自己想安装的位置就行。</p></li><li><p>安装git组件，图中框起来的为默认选中的组件，根据自己的需求勾选好后，选择下一步。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH1u6.png" alt="6"></p></li><li><p>菜单文件夹，直接选择默认就行。</p></li><li><p>选择git的默认编辑器</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH3DK.png" alt="7"></p></li><li><p>选择仓库的初始名称。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH8HO.png" alt="8"></p></li><li><p>修改系统的环境变量</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHYUe.png" alt="9"></p></li><li><p>SSL的证书选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHt4H.png" alt="10"></p></li><li><p>配置行尾结束符，默认为unix格式，可根据自己的情况选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHUCd.png" alt="11"></p></li><li><p>配置终端仿真，建议第一个</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHa8A.png" alt="12"></p></li><li><p>其他配置，默认即可。</p></li><li><p>安装完成后点击鼠标右键会出现<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong>两个选项</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHwvt.png" alt="13"></p></li></ol><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>在自己想安装hexo的位置新建一个叫blog的文件夹。创建完成后使用Windows命令窗口进入blog的文件夹中。</p><p>使用npm命令安装hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHdgI.png" alt="14"></p><p>安装完成后再输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog  &#x2F;&#x2F;blog可替换成你想要的名字</span><br></pre></td></tr></table></figure><p>进行初始化</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHBKP.png" alt="15"></p><p>出现 Start blogging with Hexo！即为成功。</p><p>进入第二个一创建好的blog文件夹，按顺序输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello Hexo&#x2F;&#x2F;新建一篇名为“hello Hexo”的博客</span><br><span class="line">hexo g&#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s&#x2F;&#x2F;本地部署预览</span><br></pre></td></tr></table></figure><p>完成后输入localhost:4000可进行本地访问。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHJED.png" alt="16"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="GitHub仓库创建"><a href="#GitHub仓库创建" class="headerlink" title="GitHub仓库创建"></a>GitHub仓库创建</h3><p>首先要有一个GitHub的账号。</p><p>登录后点击左上角的new，创建新的仓库。进入仓库后输入仓库名称，必须要与owner下的名称一致，输入完成后即可（因为我之前已经创建过了仓库，所以提示）</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHK3R.png" alt="17"></p><h3 id="GitHubSSH配置"><a href="#GitHubSSH配置" class="headerlink" title="GitHubSSH配置"></a>GitHubSSH配置</h3><p>打开git bash输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.email “xxx@qq.com“ &#x2F;&#x2F;填写注册github的邮箱</span><br><span class="line"></span><br><span class="line">git config –global user.name “xxxx” &#x2F;&#x2F;github 用户名</span><br><span class="line"></span><br><span class="line">ssh-keygen &#x2F;&#x2F;输入完这个就一致enter就行了</span><br></pre></td></tr></table></figure><p>完成后进入用户目录下的.ssh文件夹，打开id_rsa.pub，复制里面的内容。</p><p>进入GitHub，鼠标移动到右上角头像处，点击settings，之后再点击左边 SSH and GPG keys。创建一个新的SSH即可。</p><h3 id="Hexo与GitHub连接"><a href="#Hexo与GitHub连接" class="headerlink" title="Hexo与GitHub连接"></a>Hexo与GitHub连接</h3><p>在站点文件夹中打开_config.yml，将Deployment改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yui1111&#x2F;yui1111.github.io.git &#x2F;&#x2F;改为自己GitHub中的https链接</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqLBK1.png" alt="18"></p><p>将”url”后改为“<a href="https://github项目名&quot;/">https://github项目名&quot;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;yui1111.github.io &#x2F;&#x2F;改这个</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure><p>安装插件，上传博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">git config --global user.email &quot;github邮箱&quot;</span><br><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>输入网址如<a href="https://yui1111.github.io后等待一会即可进入./">https://yui1111.github.io后等待一会即可进入。</a></p><p>至此搭建过程结束。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
