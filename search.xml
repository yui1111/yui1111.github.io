<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面向对象</title>
      <link href="2021/04/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2021/04/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的编程"><a href="#面向对象的编程" class="headerlink" title="面向对象的编程"></a>面向对象的编程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="自己的理解"><a href="#自己的理解" class="headerlink" title="自己的理解"></a>自己的理解</h3><ol><li><p>面向过程的编程</p><p>就是具体问题具体分析，也就是说对于这个问题专门写一个程序来解决。</p></li><li><p>面向对象的编程</p><p>是一个被动的行为，脱离主观意识，贴近事物的自然运行模式，具体来说就是封装一个方法无论是谁用都可以解决这个问题。</p></li></ol><h3 id="网上看到的理解"><a href="#网上看到的理解" class="headerlink" title="网上看到的理解"></a>网上看到的理解</h3><p>在网上看到过一个很形象的比喻：</p><p>将面向过程的编程当作一碗蛋炒饭，面向对象的编程当作是一份盖浇饭。蛋炒饭最后的一道工序肯定是把米饭和鸡蛋混在一起炒匀。盖浇饭呢，则是把米饭和盖菜分别做好，你如果要一份红烧肉盖饭呢，就给你浇一份红烧肉；如果要一份青椒土豆盖浇饭，就给浇一份青椒土豆丝。</p><p>蛋炒饭的好处就是入味均匀，吃起来香。如果恰巧你不爱吃鸡蛋，只爱吃青菜的话，那么唯一的办法就是全部倒掉，重新做一份青菜炒饭了。盖浇饭就没这么多麻烦，你只需要把上面的盖菜拨掉，更换一份盖菜就可以了。盖浇饭的缺点是入味不均，可能没有蛋炒饭那么香。</p><p>详情具体见<a href="https://blog.csdn.net/jerry11112/article/details/79027834">CSDN</a></p><h3 id="面向对象与面向过程的优缺点"><a href="#面向对象与面向过程的优缺点" class="headerlink" title="面向对象与面向过程的优缺点"></a>面向对象与面向过程的优缺点</h3><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</span><br><span class="line">缺点：没有面向对象易维护、易复用、易扩展</span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</span><br><span class="line">缺点：性能比面向过程低</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类就是一个模子，它定义了所包含的全体对象的公共特征和功能。如：人类是一个类。</p><p>我们可以将类看作一张盖楼的图纸，而对象就是盖出来的楼。</p><p>类中可以写<code>字段 属性 方法</code></p><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>注意；一般不会使用<code>public</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _gander;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;学生信息&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;姓名：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;性别：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._gander);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;年龄：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建类的对象"><a href="#创建类的对象" class="headerlink" title="创建类的对象"></a>创建类的对象</h3><p>使用关键字<code>new</code>;</p><p>我们管创建这个类的对象过程称为类的实例化</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person student = <span class="keyword">new</span> Person();<span class="comment">//Person 已经写好的类</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性的作用就是保护字段，对字段的复制和取值进行限定。</p><p>属性的本质就是<strong>两个方法</strong>：</p><ol><li>get()：当你输出属性的值时，会执行<code>get</code>方法</li><li>set()：当你给属性赋值的时候，首先会执行<code>set</code>方法</li></ol><p>我们可以使用属性来间接给字段赋值，其中<code>value</code>的值就是用户传入的值，它就像是一个中间变量，我们可以对它进行过滤操作</p><p>注意：如果没写<code>private</code>关键字，默认也是私有的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _gander;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;学生信息&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;姓名：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;性别：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Gander);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;年龄：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h4><p>以 Age 属性为例，我们可以在set中写一系列的语法进行过滤操作</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> &lt; <span class="number">0</span> || <span class="keyword">value</span> &gt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _age = Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们传入的值为 -12 时最后传给<code>_age</code>的值就会变成 0</p><h3 id="静态与非静态区别"><a href="#静态与非静态区别" class="headerlink" title="静态与非静态区别"></a>静态与非静态区别</h3><ol><li><p>在非静态类中，既可以有实例成员，也可以有静态成员</p></li><li><p>静态成员必须使用类名去调用，而实例成员使用对象名调用</p></li><li><p>静态函数中，只允许访问静态成员</p></li><li><p>实例函数中，既可以使用静态成员，也可以使用实例成员</p></li><li><p>静态类中只允许有静态成员，不允许有实例成员</p></li></ol><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>作用：帮助我们初始化对象</p><p>注意：</p><ol><li>构造函数没有返回值，连 void 都不能写</li><li>构造函数的名称必须跟类名一样</li><li>实例化对象的时候会先执行构造函数</li></ol><p>实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;请输入姓名，性别，年龄&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> name = Console.ReadLine();</span><br><span class="line">        <span class="built_in">char</span> gander = Convert.ToChar(Console.ReadLine());</span><br><span class="line">        <span class="built_in">int</span> age = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">        <span class="keyword">this</span>.Gander = gander;</span><br><span class="line">        <span class="keyword">this</span>.Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实列化对象时先回执行这段代码</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/17/4L5kQKjwgWzI7YE.png" alt="image-20210417144353426"></p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title=":this关键字"></a>:this关键字</h4><p>重载的构造函数调用构造函数使用<code>:this</code>关键字</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">char</span> gander,<span class="built_in">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    <span class="keyword">this</span>.Gander = gander;</span><br><span class="line">    <span class="keyword">this</span>.Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> age</span>):<span class="title">this</span>(<span class="params">name,<span class="string">&#x27;男&#x27;</span>,age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘男’为自己设置的默认值。</p><h1 id="面向对象继承"><a href="#面向对象继承" class="headerlink" title="面向对象继承"></a>面向对象继承</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>字符串的不可变性</p><p>当你给一个字符串重新赋值之后，之前的值并没有被销毁，而是重新弄个开辟了一块新的内存空间</p></li><li><p>我们可以将字符串看作是 char 类型的一个只读数组</p><p><code>ToCharArray()</code>可以将字符串转换为 char 数组</p><p><code>new string(char[] 变量名)</code>可以将 char 数组类型转换为字符串</p></li></ol><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>因为使用string重新赋值时会重新开辟新的空间，而开辟新的空间会消耗一定的时间，所以我们可以使用<code>StringBuilder</code>，只需要最后将其转换为字符串类型即可。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//转换为String类型</span></span><br><span class="line">sb.ToString();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 自己看的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>study</title>
      <link href="2021/04/09/study/"/>
      <url>2021/04/09/study/</url>
      
        <content type="html"><![CDATA[<h1 id="新的东西"><a href="#新的东西" class="headerlink" title="新的东西"></a>新的东西</h1><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ol><li><p>使用<code>#region</code>和<code>#endregion</code>实现几段代码的折叠</p></li><li><p>金钱类型：<code>decimal</code> 用来存储金钱，值后面需加上一个m</p></li><li><p><code>@</code>符号可以取消杠在字符串中的转义作用 如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;Hello\\world!&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">@&quot;Hello\world!&quot;</span>;</span><br><span class="line"><span class="comment">//这两个效果一致</span></span><br></pre></td></tr></table></figure></li><li><p>隐式类型转换</p><p>在满足一定条件后自动发生类型转换</p><p>例如：<code>int</code>和<code>double</code>兼容（都是数字类型），目标类型大于原类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 自动类型转换 int--&gt;double</span></span><br><span class="line"><span class="built_in">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">double</span> num = n;</span><br></pre></td></tr></table></figure></li><li><p>Convert类型转换</p><p>使用 <strong>Convert.to数据类型(变量名)</strong></p><p>如：<code>Convert.ToInt32(a)</code></p></li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="语法-逗号均为英文-："><a href="#语法-逗号均为英文-：" class="headerlink" title="语法**(逗号均为英文)**："></a>语法**(逗号均为英文)**：</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="built_in">enum</span> 枚举类型名</span><br><span class="line">&#123;</span><br><span class="line">    值<span class="number">1</span>,</span><br><span class="line">    值<span class="number">2</span>,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Gander wu = Gander.女;</span><br><span class="line">    Console.WriteLine(wu);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>枚举也是定义一个新的变量类型，如果定义的变量类型与数据类型不一致的话将会报错。如：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> wu = Gander.女;</span><br><span class="line">Console.WriteLine(wu);</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/10/DLrMOta8i6H2sf9.png" alt="image-20210410222727046"></p></li><li><p>枚举类型默认可以和<code>int</code>类型转换，转换结果有点类似于</p></li></ol><p>输出C语言中的数组下标，但你将值赋值的话，下标将会变成你赋值的数开始。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女,</span><br><span class="line">    秀吉</span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*---------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男=<span class="number">1</span>,</span><br><span class="line">    女,</span><br><span class="line">    秀吉=<span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">​```</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>同时<code>int</code>类型也能转换成枚举类型，注意枚举类型中没有这个数字这只会输出这个数字。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line"> 男,</span><br><span class="line">    女,</span><br><span class="line">    秀吉</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*---------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男=<span class="number">1</span>,</span><br><span class="line">    女,</span><br><span class="line">    秀吉=<span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>C# 中结构类似于C语言的结构体，但在定义结构里的变量时需要加上<code>public</code>，否则将会无法使用</p><p>基本语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="keyword">struct</span> 结构名</span><br><span class="line">&#123;</span><br><span class="line">    字段;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>基本语法：<code>数组类型[] 数组名=new 数组类型[数组长度];</code></p><p>如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种*/</span></span><br><span class="line"><span class="built_in">int</span>[] number = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*第二种*/</span></span><br><span class="line"><span class="built_in">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="out-参数"><a href="#out-参数" class="headerlink" title="out 参数"></a>out 参数</h2><p>基本语法：<code>out 变量类型 变量名</code></p><p>注意：传入参数的时候一定要加上<code>out</code>关键字</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetAll</span>(<span class="params"><span class="built_in">double</span>[] num,<span class="keyword">out</span> <span class="built_in">double</span> a,<span class="keyword">out</span> <span class="built_in">double</span> b,<span class="keyword">out</span> <span class="built_in">double</span> c,<span class="keyword">out</span> <span class="built_in">double</span> d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = num[<span class="number">0</span>];</span><br><span class="line">    b = num[<span class="number">1</span>];</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            b = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        c += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    d = c / num.Length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] num = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="built_in">double</span> max;</span><br><span class="line">    <span class="built_in">double</span> min;</span><br><span class="line">    <span class="built_in">double</span> sum;</span><br><span class="line">    <span class="built_in">double</span> avg;</span><br><span class="line">    GetAll(num,<span class="keyword">out</span> max,<span class="keyword">out</span> min,<span class="keyword">out</span> sum,<span class="keyword">out</span> avg);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;max=&#123;0&#125;,min=&#123;1&#125;,sum=&#123;2&#125;,avg=&#123;3&#125;&quot;</span>, max, min, sum, avg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ref-参数"><a href="#ref-参数" class="headerlink" title="ref 参数"></a>ref 参数</h2><p>刚接触感觉和C语言中的<strong>指针</strong>类似</p><p>注意：ref参数要求在方法外必须为其赋值，而方法内可以不赋值</p><p>使用方法 例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> n1 = <span class="number">10</span>, n2 = <span class="number">20</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;交换前n1=&#123;0&#125;,n2=&#123;1&#125;&quot;</span>, n1, n2);</span><br><span class="line">    MySwap(<span class="keyword">ref</span> n1, <span class="keyword">ref</span> n2);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;交换后n1=&#123;0&#125;,n2=&#123;1&#125;&quot;</span>, n1, n2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MySwap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a,<span class="keyword">ref</span> <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = a - b;</span><br><span class="line">    b = a + b;</span><br><span class="line">    a = b - a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h2><p>将实参列表中跟可变参数数组类型一致的元素都当作数组的元素去处理</p><p>具体实例见下方</p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>差不多就是多个方法可以定为同一个名字</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1.21</span>, <span class="number">6.12</span>));</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">sum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">double</span>[] num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i&lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">7.33</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Random的调用"><a href="#Random的调用" class="headerlink" title="Random的调用"></a>Random的调用</h2><h3 id="生成-？-？的随机数"><a href="#生成-？-？的随机数" class="headerlink" title="生成 ？~ ？的随机数"></a>生成 ？~ ？的随机数</h3><p>例如：生成1~6中的随机整数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random 变量 = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="built_in">int</span> rNumber = r.Next(<span class="number">1</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ol><li>public：公开的，在哪都能访问</li><li>private：私有的，只能在当前类的内部进行访问</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>visual studio 中比较常用的快捷键：</p><ol><li><code>Ctrl+K,C 或 Ctrl+K,U</code> 注释</li></ol><h1 id="值得注意的地方"><a href="#值得注意的地方" class="headerlink" title="值得注意的地方"></a>值得注意的地方</h1><h2 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h2><ol><li>C# 中 <code>char</code>表示为字符型且仅能使用<strong>单引号来赋值</strong></li></ol><p>​        <code>string</code>表示为字符串类型且仅能使用<strong>双引号来赋值</strong></p><ol start="2"><li>C# 中可以使用占位符来表示变量，使用方法有些类似与C语言中的<code>%d %s</code>等如：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> n2 = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> n3 = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数为&#123;0&#125;,第二个数为&#123;1&#125;,第三个数为&#123;2&#125;&quot;</span>,n1,n2,n3);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>C# 中没有全局变量，但可以使用<strong>静态字段</strong>来模拟全局变量</p><p>如：<code>public static int _num = 10;</code></p></li></ol><h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ol><li><code>Console.ReadLine()</code>为接收用户传入的东西，<strong>但无论用户输入的是什么都会变成字符串类型</strong></li><li><code>Console.Read()</code>：从输入流读入<strong>一个字符</strong>，至换行符结束</li><li><code>Console.ReadLine()</code>：从输入流读入<strong>一行字符</strong>，至换行符结束；</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ol><li><code>Console.Write()</code>：输出<strong>一行文本</strong>；</li><li><code>Console.WriteLine()</code>：输出<strong>一行文本</strong>，并在<strong>结尾处自动换行</strong>；</li></ol><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p>   使用 <code>Console.Clear();</code>清空当前全部内容</p><h3 id="Console-ReadKey"><a href="#Console-ReadKey" class="headerlink" title="Console.ReadKey()"></a>Console.ReadKey()</h3><p><code>Console.ReadKey()</code>中参数为<code>true</code>时随便输入的字符将不会显示在控制台上，参数为<code>false</code>或者不写时反之</p><h1 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h1><ol><li><p>Pascal 大小写</p><p>标识符中每个单词的首字母大写</p><p>用于<strong>类型名</strong>和<strong>成员名</strong></p><p>如：<code>CarDeck</code>,<code>DealersHand</code></p></li><li><p>Camel 大小写</p><p>出第一个单词意外，标识符中所有的单词都首字母大写</p><p>用于<strong>本地变量</strong>和<strong>方法参数</strong></p><p>如：<code>totalCycleCount</code>.<code>randomSeedParam</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 自己看的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="2021/04/07/hello%20C%20sharp/"/>
      <url>2021/04/07/hello%20C%20sharp/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-C"><a href="#Hello-C" class="headerlink" title="Hello C#"></a>Hello C#</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">myApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World! Hello C#&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;当前时间为：&quot;</span>+ DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化</title>
      <link href="2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
      <url>2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="更改公告内容-gif图片"><a href="#更改公告内容-gif图片" class="headerlink" title="更改公告内容+gif图片"></a>更改公告内容+gif图片</h1><p>在主题配置文件中搜索 card_announcement </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span> <span class="string">//公告内容</span></span><br></pre></td></tr></table></figure><p>更改后</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">欢迎来到yui1111的博客！&lt;img</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/rigodlee/BLOGCDN/img/20150404H5648_ZuzhL.gif&quot;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://imgtu.com/i/603iAU"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/03/14/603iAU.png" alt="603iAU.png"></a></p><h1 id="更换头像与背景图像"><a href="#更换头像与背景图像" class="headerlink" title="更换头像与背景图像"></a>更换头像与背景图像</h1><p>打开主题配置文件，搜索<code>Avatar</code>往下一排全是关于博客头像背景图片之类的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 个人博客搭建</title>
      <link href="2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="会使用到的工具"><a href="#会使用到的工具" class="headerlink" title="会使用到的工具"></a>会使用到的工具</h2><ul><li><p>node.js</p></li><li><p>sublime</p></li><li><p>git</p></li></ul><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><p>首先我们首先在node.js的<a href="https://nodejs.org/zh-cn/download/">官网</a>下载</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHuC9.png" alt="1"></p><p>使用其他平台的用户可根据自己的需求下载哦（图片为Windows平台）</p><p>下载完成后，一路next就能安装成功。</p><h4 id="检查安装情况"><a href="#检查安装情况" class="headerlink" title="检查安装情况"></a>检查安装情况</h4><ul><li><strong>node.js</strong></li></ul><p>打开Windows 命令处理程序输入node -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHm4J.png" alt="2"></p><p>出现版本号即为安装成功</p><ul><li><strong>npm</strong></li></ul><p>继续在Windows 命令处理程序输入npm -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHABT.png" alt="3"></p><p>出现版本号即为安装成功</p><h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><p>直接到<a href="http://www.sublimetext.com/3">sublime官网</a>下载。建议安装在与博客文件同一文件夹中。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="下载和安装-1"><a href="#下载和安装-1" class="headerlink" title="下载和安装"></a>下载和安装</h4><ul><li><p><strong>下载</strong></p><p>下载git可直接去git**<a href="">官网</a>**下载。进入官网后点击download。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHMg1.png" alt="4"></p></li><li><p><strong>安装</strong></p></li></ul><ol><li><p>下载完成后打开进入此界面（因为我已经安装过git所以图中下面会多显示Only show new options ）</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHQjx.png" alt="5"></p></li><li><p>安装路径——选择自己想安装的位置就行。</p></li><li><p>安装git组件，图中框起来的为默认选中的组件，根据自己的需求勾选好后，选择下一步。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH1u6.png" alt="6"></p></li><li><p>菜单文件夹，直接选择默认就行。</p></li><li><p>选择git的默认编辑器</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH3DK.png" alt="7"></p></li><li><p>选择仓库的初始名称。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH8HO.png" alt="8"></p></li><li><p>修改系统的环境变量</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHYUe.png" alt="9"></p></li><li><p>SSL的证书选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHt4H.png" alt="10"></p></li><li><p>配置行尾结束符，默认为unix格式，可根据自己的情况选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHUCd.png" alt="11"></p></li><li><p>配置终端仿真，建议第一个</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHa8A.png" alt="12"></p></li><li><p>其他配置，默认即可。</p></li><li><p>安装完成后点击鼠标右键会出现<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong>两个选项</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHwvt.png" alt="13"></p></li></ol><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>在自己想安装hexo的位置新建一个叫blog的文件夹。创建完成后使用Windows命令窗口进入blog的文件夹中。</p><p>使用npm命令安装hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHdgI.png" alt="14"></p><p>安装完成后再输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog  &#x2F;&#x2F;blog可替换成你想要的名字</span><br></pre></td></tr></table></figure><p>进行初始化</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHBKP.png" alt="15"></p><p>出现 Start blogging with Hexo！即为成功。</p><p>进入第二个一创建好的blog文件夹，按顺序输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello Hexo&#x2F;&#x2F;新建一篇名为“hello Hexo”的博客</span><br><span class="line">hexo g&#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s&#x2F;&#x2F;本地部署预览</span><br></pre></td></tr></table></figure><p>完成后输入localhost:4000可进行本地访问。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHJED.png" alt="16"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="GitHub仓库创建"><a href="#GitHub仓库创建" class="headerlink" title="GitHub仓库创建"></a>GitHub仓库创建</h3><p>首先要有一个GitHub的账号。</p><p>登录后点击左上角的new，创建新的仓库。进入仓库后输入仓库名称，必须要与owner下的名称一致，输入完成后即可（因为我之前已经创建过了仓库，所以提示）</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHK3R.png" alt="17"></p><h3 id="GitHubSSH配置"><a href="#GitHubSSH配置" class="headerlink" title="GitHubSSH配置"></a>GitHubSSH配置</h3><p>打开git bash输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.email “xxx@qq.com“ &#x2F;&#x2F;填写注册github的邮箱</span><br><span class="line"></span><br><span class="line">git config –global user.name “xxxx” &#x2F;&#x2F;github 用户名</span><br><span class="line"></span><br><span class="line">ssh-keygen &#x2F;&#x2F;输入完这个就一致enter就行了</span><br></pre></td></tr></table></figure><p>完成后进入用户目录下的.ssh文件夹，打开id_rsa.pub，复制里面的内容。</p><p>进入GitHub，鼠标移动到右上角头像处，点击settings，之后再点击左边 SSH and GPG keys。创建一个新的SSH即可。</p><h3 id="Hexo与GitHub连接"><a href="#Hexo与GitHub连接" class="headerlink" title="Hexo与GitHub连接"></a>Hexo与GitHub连接</h3><p>在站点文件夹中打开_config.yml，将Deployment改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yui1111&#x2F;yui1111.github.io.git &#x2F;&#x2F;改为自己GitHub中的https链接</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqLBK1.png" alt="18"></p><p>将”url”后改为“<a href="https://github项目名&quot;/">https://github项目名&quot;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;yui1111.github.io &#x2F;&#x2F;改这个</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure><p>安装插件，上传博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">git config --global user.email &quot;github邮箱&quot;</span><br><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>输入网址如<a href="https://yui1111.github.io后等待一会即可进入./">https://yui1111.github.io后等待一会即可进入。</a></p><p>至此搭建过程结束。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
