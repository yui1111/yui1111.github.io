<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unity</title>
      <link href="2021/05/08/unity/"/>
      <url>2021/05/08/unity/</url>
      
        <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><ol><li><p>围绕当前拖动位置旋转：按住<code>alt</code>+鼠标左键拖动</p></li><li><p>将选中的对象居中：选中对象按<code>F</code></p></li><li><p>放大缩小：<code>alt</code>+鼠标右键</p></li><li><p>场景漫游：鼠标右键+<code>W/A/S/D/Q/E</code></p></li><li><p>定点吸附：选择物体后按住<code>V</code>键，定位顶点，在拖拽到目标物体的某个定点上</p></li><li><p>将选中的对象放到当前屏幕中间：<code>Ctrl+Shift+F</code></p></li></ol><h1 id="Game-Object游戏对象"><a href="#Game-Object游戏对象" class="headerlink" title="Game Object游戏对象"></a>Game Object游戏对象</h1><p>运行时出现在场景中的游戏物体，是一种<strong>容器</strong></p><p>如：人物，树木</p><h2 id="组件-Component"><a href="#组件-Component" class="headerlink" title="组件 Component"></a>组件 Component</h2><p>组件是游戏对象的功能模块，每个组件都是一个类的实例</p><h3 id="Transform-变换组件"><a href="#Transform-变换组件" class="headerlink" title="Transform 变换组件"></a>Transform 变换组件</h3><p>决定物体位置、旋转、缩放比</p><h3 id="Mesh-Filter-网格过滤器"><a href="#Mesh-Filter-网格过滤器" class="headerlink" title="Mesh Filter 网格过滤器"></a>Mesh Filter 网格过滤器</h3><p>决定物体的形状</p><p>用于从资源中获取网格信息</p><h3 id="Mesh-Renderer-网格渲染器"><a href="#Mesh-Renderer-网格渲染器" class="headerlink" title="Mesh Renderer 网格渲染器"></a>Mesh Renderer 网格渲染器</h3><p>用于渲染</p><p>从网格过滤器中获得几何形状，再根据变化组件定义的位置进行渲染</p><p>网格过滤器与网格渲染器联合使用，是模型显示到屏幕上</p><h2 id="创建一个物体"><a href="#创建一个物体" class="headerlink" title="创建一个物体"></a>创建一个物体</h2><ol><li><p>先创建一个空对象（默认就会有Transform组件）</p></li><li><p>添加组件</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/09/1S8dM9JKnmv3toH.png" alt="image-20210509225405339"></p></li><li><p>修改 Mesh Filter 中的 Mesh 属性和 Mesh Renderer 中的材质 Materials 属性</p></li></ol><p>最后呈现出的效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/09/OzS69sBNtAIjfwx.png" alt="image-20210509225806826"></p><h2 id="父类对象与子类对象"><a href="#父类对象与子类对象" class="headerlink" title="父类对象与子类对象"></a>父类对象与子类对象</h2><p>可以将对象拖拽到另一个对象中去，拖进去的对象为子类对象，另一个为父类对象。</p><p>我们可以通过修改父类对象的属性而对子类对象也进行修改</p><p>注意：当物体对象有一个父类对象，那么子类对象与父类对象是相对的</p><p>例如：父类对象的 X 为10，表示父类与这个世界原点的 X 转动了 10 ，子类对象的 X 为 20 ，表示子类对象与父类相对位置 X 转动了 10 ，而子类对象与时间原点的 X 转动了 30.</p><h1 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h1><h2 id="Rendering-Mode"><a href="#Rendering-Mode" class="headerlink" title="Rendering Mode"></a>Rendering Mode</h2><p>渲染模式</p><ol><li>Opaque ：不透明的</li><li>Transparent ：透明，用于半透明或全透明的物体，如玻璃</li><li>Cutout ：镂空，用于完全透明或完全不透明的物体，如栅栏</li><li>Fade ：渐变，用于需要淡入淡出的物体</li></ol><h2 id="Albedo"><a href="#Albedo" class="headerlink" title="Albedo"></a>Albedo</h2><p>用于修改物体基础贴图，即决定物体表面的纹理与颜色</p><p>注意：修改这些会直接影响预设的材质，所以 unity 提供的一些物体不能修改 Material 属性</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/10/oquE5cLUySXeBgF.png" alt="image-20210510234653730"></p><h1 id="Skybox"><a href="#Skybox" class="headerlink" title="Skybox"></a>Skybox</h1><p>围绕整个场景的包装器，用于模拟天空材质</p><h2 id="使用Skybox"><a href="#使用Skybox" class="headerlink" title="使用Skybox"></a>使用Skybox</h2><p>设置摄像机 Clear Flags 属性为 Skybox</p><p>方法一：摄相机添加组件 Skybox，再设置 Custom Skybox 属性</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/4VQzkw7JDyNPd36.png" alt="image-20210511215123733"></p><p>方式二：Window - Rendering - Lighting - Environment - Environment Lighting  中 Source 改为 Skybox</p><p>可作为反射源将天空色彩反射到场景中物体</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/EKsRdIh8B5kjYDn.png" alt="image-20210511215650208"></p><h1 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h1><h2 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h2><p>决定摄像机图层的顺序，深度越小的越在底层</p><p>如：有两个摄像机，第一个的深度为 -1，另一个的深度为 1.在 Game 窗口中显示的是深度为 1 的摄像机的画面</p><h2 id="Viewport-Rect"><a href="#Viewport-Rect" class="headerlink" title="Viewport Rect"></a>Viewport Rect</h2><p>决定摄像机在Game的坐标位置与在Game窗口中的大小</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/13/XIyA7mhOgzBd812.png" alt="image-20210513105501808"></p><p>X Y 代表横纵坐标，W H 代表宽高，范围为 0~1</p><h1 id="Global-Illumination全局光照"><a href="#Global-Illumination全局光照" class="headerlink" title="Global Illumination全局光照"></a>Global Illumination全局光照</h1><ul><li>简称 GI</li><li>能够计算直接光、间接光、环境光以及反射光的光照系统</li><li>通过 GI 算法可以是渲染出来的光照效果更为真实丰富</li></ul><h2 id="Directional平行光"><a href="#Directional平行光" class="headerlink" title="Directional平行光"></a>Directional平行光</h2><p>类似于太阳的光，无论将光源放在任何位置，都会又光照射</p><ul><li>Intensity 为光线的强度</li><li>可以通过调整 Color 属性改变光源的颜色</li></ul><h2 id="Point点光源"><a href="#Point点光源" class="headerlink" title="Point点光源"></a>Point点光源</h2><p>类似于灯泡那种类型的光源，即一个点向四周发射光</p><ul><li><p>Range：调整光源范围</p><p>其他的类似于平行光</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/21/6XQfVWxOrL7HczJ.png" alt="image-20210521224521958"></p><h2 id="SoptLight聚光灯"><a href="#SoptLight聚光灯" class="headerlink" title="SoptLight聚光灯"></a>SoptLight聚光灯</h2><p>类似于手电筒类型的光源，由一个点向一个方向发射光</p><ul><li><p>Spot Angle：聚光角度，最多179</p><p>其他与点光源类似</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/21/gH2doGECqFAVX5W.png" alt="image-20210521230042081"></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study3</title>
      <link href="2021/04/26/Study3/"/>
      <url>2021/04/26/Study3/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Winform"><a href="#初识Winform" class="headerlink" title="初识Winform"></a>初识Winform</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>Name：在后台要获得前台的控件对象，需要使用Name属性</p><p>Enabled：指示一个控件是否可用</p><p>visible：指示一个控件是否可见</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li><p>注册事件</p><p>双击控件注册的都是控件默认被选中的那个事件</p><p>打开按键属性，双击<code>Click</code>，进入到<code>Form.cs</code>中，它会自动给你创建一个方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果想要输出一段话，需要使用<code>MessageBox.Show()</code>，<code>Console.WriteLine</code>不可用</p></li><li><p>触发事件</p><p>这里点击按钮就会触发事件</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/27/nxXhuYmD76NCAQq.png" alt="image-20210427100515724"></p></li></ol><h2 id="TextBox控件"><a href="#TextBox控件" class="headerlink" title="TextBox控件"></a>TextBox控件</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ol><li>WordWrap：指示文本框是否换行</li><li>PasswordChar：让文本框显示一个单一的字符</li><li>ScollBars：是否显示滚动条</li></ol><h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><p>TextChanged：当文本框中的内容发生改变的时候触发这个事件</p><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>在指定的时间几个内做一件指定事件</p><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><ol><li><p>visible</p><p>代表是否可见</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button1.Visinle = <span class="literal">false</span>;<span class="comment">//表示这个按钮不可见，反之为true则可见</span></span><br></pre></td></tr></table></figure></li><li><p>enable</p><p>代表是否可用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button1.Enable = <span class="literal">false</span>;<span class="comment">//表示这个按钮不可用，反之为true则可用</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="1简单小游戏（？"><a href="#1简单小游戏（？" class="headerlink" title="1简单小游戏（？"></a>1简单小游戏（？</h2><p>当鼠标接近一个按钮时这个按钮会随机移动到窗体中另一个位置，</p><p>使用<code>MouseEnter</code>这个事件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_MouseEnter</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//给按钮一个新的坐标</span></span><br><span class="line">    <span class="comment">//这按钮活动的最大宽度就是 窗体的宽度减去按钮的宽度</span></span><br><span class="line">    <span class="built_in">int</span> x = <span class="keyword">this</span>.ClientSize.Width - button2.Width;</span><br><span class="line">    <span class="built_in">int</span> y = <span class="keyword">this</span>.ClientSize.Height - button2.Height;</span><br><span class="line"></span><br><span class="line">    Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    button2.Location = <span class="keyword">new</span> Point(r.Next(<span class="number">0</span>,x+<span class="number">1</span>), r.Next(<span class="number">0</span>,y+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.ClientSize</code>为当前窗体。</p><p>链接：<a href="https://wwr.lanzous.com/iOc5Doqo0ih">https://wwr.lanzous.com/iOc5Doqo0ih</a> </p><p>密码：11</p><h2 id="2简单记事本"><a href="#2简单记事本" class="headerlink" title="2简单记事本"></a>2简单记事本</h2><p>链接：<a href="https://wwr.lanzous.com/iRnqroqo0kj">https://wwr.lanzous.com/iRnqroqo0kj</a></p><p>密码：11</p><p>注意：保存的路径因为每个人的文件夹不一样，所有大概率会保存失败，此文件保存在<code>E:\t</code>文件夹下。用户名为：<code>yui</code> 密码：<code>123</code></p><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/02/f1QpnhmIYsFxRcv.png" alt="image-20210502224820030"></p><h3 id="写字界面"><a href="#写字界面" class="headerlink" title="写字界面"></a>写字界面</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/02/8uXH52lFLheUNBz.png" alt="image-20210502225507302"></p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Login_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> admin = <span class="string">&quot;yui&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(Admin.Text == admin &amp;&amp; PassWord.Text == password)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        label1.Visible = <span class="literal">false</span>;</span><br><span class="line">        label2.Visible = <span class="literal">false</span>;</span><br><span class="line">        Admin.Visible = <span class="literal">false</span>;</span><br><span class="line">        PassWord.Visible = <span class="literal">false</span>;</span><br><span class="line">        btnLogin.Visible = <span class="literal">false</span>;</span><br><span class="line">        btnWordWarp.Visible = <span class="literal">true</span>;</span><br><span class="line">        btnSaveFile.Visible = <span class="literal">true</span>;</span><br><span class="line">        Write.Visible = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;用户名或密码错误！请重试&quot;</span>);</span><br><span class="line">        Admin.Clear();</span><br><span class="line">        PassWord.Clear();</span><br><span class="line">        Admin.Focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    btnWordWarp.Visible = <span class="literal">false</span>;</span><br><span class="line">    btnSaveFile.Visible = <span class="literal">false</span>;</span><br><span class="line">    Write.Visible = <span class="literal">false</span>;</span><br><span class="line">    Write.WordWrap = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnWordWarp_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (btnWordWarp.Text == <span class="string">&quot;自动换行&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Write.WordWrap = <span class="literal">true</span>;</span><br><span class="line">        btnWordWarp.BackColor = Color.Green;</span><br><span class="line">        btnWordWarp.Text = <span class="string">&quot;取消自动换行&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Write.WordWrap = <span class="literal">false</span>;</span><br><span class="line">        btnWordWarp.Text = <span class="string">&quot;自动换行&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnSaveFile_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">@&quot;E:\t\user_text.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(str, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> user_text = Write.Text;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = Encoding.UTF8.GetBytes(user_text);</span><br><span class="line">        fs.Write(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    &#125;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;保存成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> winform </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study2</title>
      <link href="2021/04/21/Study2/"/>
      <url>2021/04/21/Study2/</url>
      
        <content type="html"><![CDATA[<h1 id="里氏转换"><a href="#里氏转换" class="headerlink" title="里氏转换"></a>里氏转换</h1><p>子类可以放在父类中</p><p>如：<code>Person p = new Student(&quot;张三&quot;,&#39;男&#39;,18,&quot;PlayGames&quot;);</code></p><h2 id="is用法"><a href="#is用法" class="headerlink" title="is用法"></a>is用法</h2><p>已有两个类：Student 类与 Programmer 类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成功</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&quot;PlayGames&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">is</span> Student)</span><br><span class="line">&#123;</span><br><span class="line">    Student ss = (Student)p;</span><br><span class="line">    ss.StudentSayHello();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转换失败</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&quot;PlayGames&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">is</span> Programmer)</span><br><span class="line">&#123;</span><br><span class="line">    Programmer ss = (Programmer)p;</span><br><span class="line">    ss.ProgrammerSayHello();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果转换成功则返回一个 true，反之则返回一个 false</p><h2 id="as用法"><a href="#as用法" class="headerlink" title="as用法"></a>as用法</h2><p>转换失败则返回 <strong>null</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成功</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&quot;PlayGames&quot;</span>);</span><br><span class="line">Student s = p <span class="keyword">as</span> Student;</span><br><span class="line"><span class="comment">//转换失败</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&quot;PlayGames&quot;</span>);</span><br><span class="line">Programmer s = p <span class="keyword">as</span> Programmer;</span><br></pre></td></tr></table></figure><h1 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h1><p>可以在当前类的内部以及<strong>该类的子类中访问</strong></p><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="创建一个集合"><a href="#创建一个集合" class="headerlink" title="创建一个集合"></a>创建一个集合</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><ol><li><p>添加单个元素</p><p>使用<code>Add</code>关键字</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.Add(<span class="literal">true</span>);</span><br><span class="line">list.Add(<span class="number">123</span>);</span><br><span class="line">list.Add(<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">list.Add(<span class="string">&quot;wuhu~&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>添加集合（用<code>Add</code>也行，但输出内容时不方便）</p><p>使用<code>AddRange</code>关键字，<code>AddRange</code>会将数组的元素（例子为数组）变成单个元素加入到集合中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.AddRange(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="输出集合内容"><a href="#输出集合内容" class="headerlink" title="输出集合内容"></a>输出集合内容</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; list.count ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(list[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><ol><li><p>删除全部元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.Clear();</span><br></pre></td></tr></table></figure></li><li><p>删除<strong>单个</strong>元素**(第一次出现的被删除)**</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.Remove(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据索引(下标)删除元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.RemoveAt(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除一定范围的元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.RemoveRange(<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//删除下表为0 1 2 的元素</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a>Contains</h2><p>判断是否有相同的元素，有返回<code>true</code>反之返回<code>false</code></p><h2 id="ArrayList长度问题"><a href="#ArrayList长度问题" class="headerlink" title="ArrayList长度问题"></a>ArrayList长度问题</h2><p>每次集合中实际包含的元素个数（count）超过了可包含的元素个数（capacity）时，集合就会像内存中申请多开辟一倍的空间</p><h1 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h1><h2 id="创建一个Hashitable对象"><a href="#创建一个Hashitable对象" class="headerlink" title="创建一个Hashitable对象"></a>创建一个Hashitable对象</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hashtable hs = <span class="keyword">new</span> Hashtable();</span><br></pre></td></tr></table></figure><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>基本语法：<code>xx.Add(Key,value);</code></p><p>Key 为键，差不多就是下标，但与其他不同的是，Key可以为任意类型的数据。</p><p>value 为值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hs.Add(<span class="string">&quot;好耶&quot;</span>, <span class="number">123</span>);</span><br><span class="line">hs.Add(<span class="string">&quot;好&quot;</span>, <span class="number">2123</span>);</span><br><span class="line">hs.Add(<span class="string">&quot;好耶耶&quot;</span>, <span class="string">&quot;haoye&quot;</span>);</span><br><span class="line">hs.Add(<span class="number">1</span>, <span class="string">&quot;good&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h2><p>这里我们想要输出数据可以使用<code>foreach</code>循环来输出（var 可以判断变量是什么类型，从而转换为对应的数据类型，但注意：使用var必须要赋初值）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> hs.Keys)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;键为：&#123;0&#125;=========值为：&#123;1&#125;&quot;</span>,i,hs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------------------------输出结果------------------------------*/</span></span><br><span class="line">键为：好=========值为：<span class="number">2123</span></span><br><span class="line">键为：<span class="number">1</span>=========值为：good</span><br><span class="line">键为：好耶=========值为：<span class="number">123</span></span><br><span class="line">键为：好耶耶=========值为：haoye</span><br></pre></td></tr></table></figure><h1 id="泛型集合对象"><a href="#泛型集合对象" class="headerlink" title="泛型集合对象"></a>泛型集合对象</h1><h2 id="创建泛型集合对象"><a href="#创建泛型集合对象" class="headerlink" title="创建泛型集合对象"></a>创建泛型集合对象</h2><p>语法：<code>List&lt;数据类型&gt; list = new List&lt;数据类型&gt;();</code>    如</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br></pre></td></tr></table></figure><h1 id="FileStream文件流"><a href="#FileStream文件流" class="headerlink" title="FileStream文件流"></a>FileStream文件流</h1><h2 id="创建新的对象"><a href="#创建新的对象" class="headerlink" title="创建新的对象"></a>创建新的对象</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileStream l = <span class="keyword">new</span> FileStream(<span class="built_in">string</span> Path, FileMode, FileAccess);</span><br></pre></td></tr></table></figure><p>path：文件路径 其他两个均为枚举类型用<code>.</code>使用</p><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l.Close();</span><br><span class="line">l.Dispose();</span><br></pre></td></tr></table></figure><h2 id="读取文件完全流程"><a href="#读取文件完全流程" class="headerlink" title="读取文件完全流程"></a>读取文件完全流程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileStream l = <span class="keyword">new</span> FileStream(<span class="string">@&quot;E:\t\test.txt&quot;</span>, FileMode.OpenOrCreate, FileAccess.Read);</span><br><span class="line"><span class="built_in">byte</span>[] b = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];       <span class="comment">//最多读取5m内容</span></span><br><span class="line"><span class="built_in">int</span> r = l.Read(b, <span class="number">0</span>, b.Length);</span><br><span class="line"><span class="built_in">string</span> s = Encoding.UTF8.GetString(b, <span class="number">0</span>, r);</span><br><span class="line">l.Close();</span><br><span class="line">l.Dispose();</span><br><span class="line">Console.WriteLine(s);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h2 id="写入文件大概流程"><a href="#写入文件大概流程" class="headerlink" title="写入文件大概流程"></a>写入文件大概流程</h2><p>我们可以使用<code>using</code>来帮我们关闭文件流</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (FileStream ll = <span class="keyword">new</span> FileStream(<span class="string">@&quot;E:\t\test.txt&quot;</span>, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;写入！！！&quot;</span>;</span><br><span class="line">    <span class="built_in">byte</span>[] <span class="keyword">by</span> = Encoding.UTF8.GetBytes(str);</span><br><span class="line">    ll.Write(<span class="keyword">by</span>, <span class="number">0</span>, <span class="keyword">by</span>.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用文件流实现复制文件操作"><a href="#使用文件流实现复制文件操作" class="headerlink" title="使用文件流实现复制文件操作"></a>使用文件流实现复制文件操作</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> source = <span class="string">@&quot;目标路径&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> target = <span class="string">@&quot;复制到新的路径&quot;</span>;</span><br><span class="line">    CopyFile(source, target);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;复制完了&quot;</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyFile</span>(<span class="params"><span class="built_in">string</span> source, <span class="built_in">string</span> target</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建读取流</span></span><br><span class="line">    <span class="keyword">using</span>(FileStream FRead = <span class="keyword">new</span> FileStream(source, FileMode.OpenOrCreate, FileAccess.Read))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建写入流</span></span><br><span class="line">        <span class="keyword">using</span>(FileStream FWrite = <span class="keyword">new</span> FileStream(target, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>];<span class="comment">//一次读入或写入的大小</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//返回本次实际读取的字节数</span></span><br><span class="line">                <span class="built_in">int</span> r = FRead.Read(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">                <span class="keyword">if</span>(r == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                FWrite.Write(buffer, <span class="number">0</span>, r);                        </span><br><span class="line">            &#125;                    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><ol><li>public : 公用的</li><li>private：私有的，只能在当前类的内部访问</li><li>protected：受保护的，只能在当前类的内部以及该类的子类中访问</li><li>internal：只能在当前程序集（项目）中的访问</li><li>protect internal：</li></ol><p>只能在修饰类的访问修饰符只有两个：public、internal</p><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>创建Person类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>有多种方式序列化，这里我用的是 xml 更多见<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.xml.serialization.xmlserializer?view=net-5.0">官方文档</a></p><p>path：保存序列化后的文件路径</p><p>obj：对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.Age = <span class="number">18</span>;</span><br><span class="line">    p.Gander = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    p.Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    MySerialize_to_xml(<span class="string">@&quot;E:\t\new1.txt&quot;</span>, p);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MySerialize_to_xml</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (FileStream fw = <span class="keyword">new</span> FileStream(path, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer xml = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">        xml.Serialize(fw, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.Age = <span class="number">18</span>;</span><br><span class="line">    p.Gander = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    p.Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    Deserialize_xml(<span class="string">@&quot;E:\t\new1.txt&quot;</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Deserialize_xml</span>(<span class="params"><span class="built_in">string</span> path,<span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person pp;</span><br><span class="line">    <span class="keyword">using</span>(FileStream fr = <span class="keyword">new</span> FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))</span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer xml = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">        pp = (Person)xml.Deserialize(fr);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125;\n&#123;1&#125;\n&#123;2&#125;&quot;</span>, pp.Name, pp.Age, pp.Gander);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h1><h2 id="部分类"><a href="#部分类" class="headerlink" title="部分类"></a>部分类</h2><p>关键字：partial</p><p>差不多就是将一个类拆分为多个类，拆分的类中所有东西都是通用的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p>关键字：sealed</p><p>密封类不能被别的类继承，但可以继承别的类</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的方法</title>
      <link href="2021/04/21/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2021/04/21/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Path类"><a href="#Path类" class="headerlink" title="Path类"></a>Path类</h1><p>引用<code>using System.IO;</code></p><h2 id="快速获取文件名"><a href="#快速获取文件名" class="headerlink" title="快速获取文件名"></a>快速获取文件名</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>;</span><br><span class="line">Console.WriteLine(Path.GetFileName(str));</span><br><span class="line"><span class="comment">/*=================================================*/</span></span><br><span class="line">输出：<span class="number">72394160</span>_p0.jpg</span><br></pre></td></tr></table></figure><h2 id="获取文件名（不加后缀）"><a href="#获取文件名（不加后缀）" class="headerlink" title="获取文件名（不加后缀）"></a>获取文件名（不加后缀）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>;</span><br><span class="line">Console.WriteLine(Path.GetFileNameWithoutExtension(str));</span><br><span class="line"><span class="comment">/*=================================================*/</span></span><br><span class="line">输出：<span class="number">72394160</span>_p0</span><br></pre></td></tr></table></figure><h2 id="获取文件后缀"><a href="#获取文件后缀" class="headerlink" title="获取文件后缀"></a>获取文件后缀</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>;</span><br><span class="line">Console.WriteLine(Path.GetExtension(str));</span><br><span class="line"><span class="comment">/*=================================================*/</span></span><br><span class="line">输出：.jpg</span><br></pre></td></tr></table></figure><h2 id="获取文件夹目录"><a href="#获取文件夹目录" class="headerlink" title="获取文件夹目录"></a>获取文件夹目录</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tring str = <span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>;</span><br><span class="line">Console.WriteLine(Path.GetDirectoryName(str));</span><br><span class="line"><span class="comment">/*=================================================*/</span></span><br><span class="line">输出：D:\pivix</span><br></pre></td></tr></table></figure><h2 id="获取文件所在的全路径"><a href="#获取文件所在的全路径" class="headerlink" title="获取文件所在的全路径"></a>获取文件所在的全路径</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tring str = <span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>;</span><br><span class="line">Console.WriteLine(Path.GetFullPath(str));</span><br><span class="line"><span class="comment">/*=================================================*/</span></span><br><span class="line">输出：D:\pivix\<span class="number">72394160</span>_p0.jpg</span><br></pre></td></tr></table></figure><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p>注意：file类只能读小文件</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.Create(<span class="string">@&quot;E:\t\test.md&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.Delete(<span class="string">@&quot;E:\t\test.md&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="复制一个文件"><a href="#复制一个文件" class="headerlink" title="复制一个文件"></a>复制一个文件</h2><p>第一项为原路径名，后一项为复制后存在哪个位置</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.Copy(<span class="string">@&quot;D:\pivix\72394160_p0.jpg&quot;</span>,<span class="string">@&quot;E:\t\copy.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="File-WriteAllBytes-写入文件"><a href="#File-WriteAllBytes-写入文件" class="headerlink" title="File.WriteAllBytes 写入文件"></a>File.WriteAllBytes 写入文件</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteAllBytes</span>(<span class="params"><span class="built_in">string</span> path,<span class="built_in">byte</span>[] bytes</span>)</span></span><br></pre></td></tr></table></figure><p>例如：采用 UTF-8格式写入Hello world 到test.txt 文件中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.WriteAllBytes(<span class="string">@&quot;E:\t\test.txt&quot;</span>, Encoding.UTF8.GetBytes(<span class="string">&quot;Hello world!&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="参数-返回值"><a href="#参数-返回值" class="headerlink" title="参数/返回值"></a>参数/返回值</h4><table><thead><tr><th align="left">参数值/返回值</th><th align="left">参数类型/返回类型</th><th>参数描述/返回描述</th></tr></thead><tbody><tr><td align="left"><em>path</em></td><td align="left"><a href="http://www.csref.cn/vs100/class/System-String.html">System-String</a></td><td>要写入的文件。</td></tr><tr><td align="left"><em>bytes</em></td><td align="left">[System-Byte<a href="http://www.csref.cn/vs100/class/System-Byte[].html">]</a></td><td>要写入文件的字节。</td></tr><tr><td align="left"><em>返回值</em></td><td align="left">void</td><td></td></tr></tbody></table><h3 id="File-WriteAllText-写入文件"><a href="#File-WriteAllText-写入文件" class="headerlink" title="File.WriteAllText 写入文件"></a>File.WriteAllText 写入文件</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.WriteAllText(<span class="string">@&quot;E:\t\test.txt&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>上述两种均为写入内容到指定文件，如果没有这个文件则会重新创建一个新的文件，如果有则会覆盖掉之前里面的内容</p><h3 id="File-AppendAllText追加内容"><a href="#File-AppendAllText追加内容" class="headerlink" title="File.AppendAllText追加内容"></a>File.AppendAllText追加内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File.AppendAllText(@&quot;E:\t\test1.txt&quot;, &quot;好耶✌&quot;);</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ol><li><p>字符串的不可变性</p><p>当你给一个字符串重新赋值之后，之前的值并没有被销毁，而是重新弄个开辟了一块新的内存空间</p></li><li><p>我们可以将字符串看作是 char 类型的一个只读数组</p><p><code>ToCharArray()</code>可以将字符串转换为 char 数组</p><p><code>new string(char[] 变量名)</code>可以将 char 数组类型转换为字符串</p></li></ol><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>因为使用string重新赋值时会重新开辟新的空间，而开辟新的空间会消耗一定的时间，所以我们可以使用<code>StringBuilder</code>，只需要最后将其转换为字符串类型即可。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//转换为String类型</span></span><br><span class="line">sb.ToString();</span><br></pre></td></tr></table></figure><p>此外还有许多关于<code>string</code>的方法见<a href="https://www.runoob.com/csharp/csharp-string.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="2021/04/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2021/04/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的编程"><a href="#面向对象的编程" class="headerlink" title="面向对象的编程"></a>面向对象的编程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="自己的理解"><a href="#自己的理解" class="headerlink" title="自己的理解"></a>自己的理解</h3><ol><li><p>面向过程的编程</p><p>就是具体问题具体分析，也就是说对于这个问题专门写一个程序来解决。</p></li><li><p>面向对象的编程</p><p>是一个被动的行为，脱离主观意识，贴近事物的自然运行模式，具体来说就是封装一个方法无论是谁用都可以解决这个问题。</p></li></ol><h3 id="网上看到的理解"><a href="#网上看到的理解" class="headerlink" title="网上看到的理解"></a>网上看到的理解</h3><p>在网上看到过一个很形象的比喻：</p><p>将面向过程的编程当作一碗蛋炒饭，面向对象的编程当作是一份盖浇饭。蛋炒饭最后的一道工序肯定是把米饭和鸡蛋混在一起炒匀。盖浇饭呢，则是把米饭和盖菜分别做好，你如果要一份红烧肉盖饭呢，就给你浇一份红烧肉；如果要一份青椒土豆盖浇饭，就给浇一份青椒土豆丝。</p><p>蛋炒饭的好处就是入味均匀，吃起来香。如果恰巧你不爱吃鸡蛋，只爱吃青菜的话，那么唯一的办法就是全部倒掉，重新做一份青菜炒饭了。盖浇饭就没这么多麻烦，你只需要把上面的盖菜拨掉，更换一份盖菜就可以了。盖浇饭的缺点是入味不均，可能没有蛋炒饭那么香。</p><p>详情具体见<a href="https://blog.csdn.net/jerry11112/article/details/79027834">CSDN</a></p><h3 id="面向对象与面向过程的优缺点"><a href="#面向对象与面向过程的优缺点" class="headerlink" title="面向对象与面向过程的优缺点"></a>面向对象与面向过程的优缺点</h3><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</span><br><span class="line">缺点：没有面向对象易维护、易复用、易扩展</span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</span><br><span class="line">缺点：性能比面向过程低</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类就是一个模子，它定义了所包含的全体对象的公共特征和功能。如：人类是一个类。</p><p>我们可以将类看作一张盖楼的图纸，而对象就是盖出来的楼。</p><p>类中可以写<code>字段 属性 方法</code></p><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>注意；一般不会使用<code>public</code>定义一个字段，一般使用<code>private</code>（当时顺手打了，懒得改0v0）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _gander;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;学生信息&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;姓名：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;性别：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._gander);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;年龄：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>._age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建类的对象"><a href="#创建类的对象" class="headerlink" title="创建类的对象"></a>创建类的对象</h3><p>使用关键字<code>new</code>;</p><p>我们管创建这个类的对象过程称为类的实例化</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person student = <span class="keyword">new</span> Person();<span class="comment">//Person 已经写好的类</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性的作用就是保护字段，对字段的复制和取值进行限定。</p><p>属性的本质就是<strong>两个方法</strong>：</p><ol><li>get()：当你输出属性的值时，会执行<code>get</code>方法</li><li>set()：当你给属性赋值的时候，首先会执行<code>set</code>方法</li></ol><p>我们可以使用属性来间接给字段赋值，其中<code>value</code>的值就是用户传入的值，它就像是一个中间变量，我们可以对它进行过滤操作</p><p>注意：如果没写<code>private</code>关键字，默认也是私有的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _gander;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;学生信息&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;姓名：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;性别：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Gander);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;年龄：&#123;0&#125;&quot;</span>, <span class="keyword">this</span>.Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h4><p>以 Age 属性为例，我们可以在set中写一系列的语法进行过滤操作</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> &lt; <span class="number">0</span> || <span class="keyword">value</span> &gt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _age = Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们传入的值为 -12 时最后传给<code>_age</code>的值就会变成 0</p><h3 id="静态与非静态区别"><a href="#静态与非静态区别" class="headerlink" title="静态与非静态区别"></a>静态与非静态区别</h3><ol><li><p>在非静态类中，既可以有实例成员，也可以有静态成员</p></li><li><p>静态成员必须使用类名去调用，而实例成员使用对象名调用</p></li><li><p>静态函数中，只允许访问静态成员</p></li><li><p>实例函数中，既可以使用静态成员，也可以使用实例成员</p></li><li><p>静态类中只允许有静态成员，不允许有实例成员</p></li></ol><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>作用：帮助我们初始化对象</p><p>注意：</p><ol><li>构造函数没有返回值，连 void 都不能写</li><li>构造函数的名称必须跟类名一样</li><li>实例化对象的时候会先执行构造函数</li></ol><p>实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;请输入姓名，性别，年龄&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> name = Console.ReadLine();</span><br><span class="line">        <span class="built_in">char</span> gander = Convert.ToChar(Console.ReadLine());</span><br><span class="line">        <span class="built_in">int</span> age = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">        <span class="keyword">this</span>.Gander = gander;</span><br><span class="line">        <span class="keyword">this</span>.Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实列化对象时先回执行这段代码</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/17/4L5kQKjwgWzI7YE.png" alt="image-20210417144353426"></p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title=":this关键字"></a>:this关键字</h4><p>重载的构造函数调用构造函数使用<code>:this</code>关键字</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">char</span> gander,<span class="built_in">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    <span class="keyword">this</span>.Gander = gander;</span><br><span class="line">    <span class="keyword">this</span>.Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> age</span>):<span class="title">this</span>(<span class="params">name,<span class="string">&#x27;男&#x27;</span>,age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘男’为自己设置的默认值。</p><h1 id="面向对象继承"><a href="#面向对象继承" class="headerlink" title="面向对象继承"></a>面向对象继承</h1><h2 id="父类-基类-与子类-派生类"><a href="#父类-基类-与子类-派生类" class="headerlink" title="父类(基类)与子类(派生类)"></a>父类(基类)与子类(派生类)</h2><p>我们可能在一些类中，写一些重复的成员，我们要看将这些重复的成员单独封装到一个类中作为这些类的父类。</p><p>例如：现在有三个类，1. 学生类 2. 老师类 3. 司机类。这些类中共有的成员为 姓名 性别 年龄 等等相同的成员，所以我们可以创建一个 人类的类作为他们的父类（注意，类不要写在同一个文件下应分开写。<strong>且不能继承父类的私有的成员</strong>）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;好耶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//与学生类相同的姓名等等</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> _salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Salary</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _salary = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _salary; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driver</span></span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//与学生类相同的姓名等等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dirver</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        console.WriteLine(<span class="string">&quot;开车~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加人类为他们的父类再使用<code>:父类名</code>继承</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;好耶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从图中可看到我们新建一个Student对象时可以使用父类公开的成员，也能使用自己的成员，但没有<code>_name</code>这个成员</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/18/hp2LC9izrZv81Wb.png" alt="image-20210418171150387"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>一个子类只能有一个父类（继承的单根性）</p></li><li><p>字类不能继承父类任何一个私有的成员</p></li><li><p>子类不能继承父类的构造函数，但字类会默认会<strong>调用父类无参的构造函数</strong>。如果在父类中重新写了一个有参数的构造函数后，无参的构造函数就无了，所以子类就会报错</p></li><li><p><strong>继承父类的本质：就是在子类创建父类对象，从而去使用父类中的成员</strong></p></li></ol><h3 id="调用父类构造函数"><a href="#调用父类构造函数" class="headerlink" title="调用父类构造函数"></a>调用父类构造函数</h3><p>使用<code>:base()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">char</span> gander, <span class="built_in">int</span> age</span>) : <span class="title">base</span>(<span class="params">name, gander, age</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的传递性"><a href="#类的传递性" class="headerlink" title="类的传递性"></a>类的传递性</h2><p>我们可以连续继承父类的成员（差不多就是套娃）直接看具体例子比较明显</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> Gander</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _gander = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gander; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WU</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;wuhu~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;好耶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span>:<span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> _salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Salary</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; _salary = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _salary; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到<code>Student</code>的父类时<code>Person</code>，而<code>Teacher</code>的父类是<code>Student</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/18/1GfclpEFoTUvZPC.png" alt="image-20210418213649657"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态就是让一个对象表现出多种的状态（类型）</p><p>实现多态有三种方法 1、虚方法 2、抽象类 3、接口</p><h2 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h2><p>将父类的方法标记为虚方法，使用关键字<code>virtual</code>，子类方法使用<code>override</code>这个函数可以被子类重新写一遍，调用父类方法时，实现跳转的方式调用子类方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Student st1 = <span class="keyword">new</span> Student(<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">        Student st2 = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        Teacher te1 = <span class="keyword">new</span> Teacher(<span class="string">&quot;王刚&quot;</span>);</span><br><span class="line">        Teacher te2 = <span class="keyword">new</span> Teacher(<span class="string">&quot;Peter&quot;</span>);</span><br><span class="line">        Master ma1 = <span class="keyword">new</span> Master(<span class="string">&quot;Yui&quot;</span>);</span><br><span class="line">        Master ma2 = <span class="keyword">new</span> Master(<span class="string">&quot;Yuki&quot;</span>);</span><br><span class="line">        Person[] people = &#123; st1, st2, te1, te2, ma1, ma2 &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            people[i].SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是人类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是学生，我叫&#123;0&#125;&quot;</span>,<span class="keyword">this</span>.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">//其余与Student相似</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>当父类中的方法不知道如何去实现的时候，可以考虑将父类写成抽象类，方法写成抽象方法。(为了让子类重写方法)。但抽象类不能创建对象</p><p>抽象方法是不允许抽象体的。就如：<code>public abstract void SayHello();</code></p><p>关键字：<code>abstract</code></p><p>注意：在子类方法中也要加上<code>override</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Animal an1 = <span class="keyword">new</span> Dog();</span><br><span class="line">        an1.Bark();</span><br><span class="line">        Animal an2 = <span class="keyword">new</span> Cat();</span><br><span class="line">        an2.Bark();</span><br><span class="line">        Console.Readkey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Bark</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bark</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;猫叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bark</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;狗叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求圆与矩形的面积和周长"><a href="#求圆与矩形的面积和周长" class="headerlink" title="求圆与矩形的面积和周长"></a>求圆与矩形的面积和周长</h3><p>可以使用抽象类的方式完成</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//使用多态求矩形的面积和周长以及圆形的面积和周长</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Shape shape1 = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;这个几何图形的面积为&#123;0&#125;，周长为&#123;1&#125;&quot;</span>,shape1.GetArea(),shape1.GetPerimeter());</span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;Hello World!&quot;);</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">double</span> r</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.R = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> _r;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> R</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _r; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _r = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.R * <span class="keyword">this</span>.R;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * <span class="keyword">this</span>.R;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span>(<span class="params"><span class="built_in">double</span> height,<span class="built_in">double</span> width</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Height = height;</span><br><span class="line">        <span class="keyword">this</span>.Width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> _height;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Height</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _height; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _height = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> _width;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Width</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _width; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _width = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Height * <span class="keyword">this</span>.Width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">this</span>.Height + <span class="keyword">this</span>.Width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用多态来实现将-移动硬盘，U盘，MP3插到电脑上模拟读写数据"><a href="#用多态来实现将-移动硬盘，U盘，MP3插到电脑上模拟读写数据" class="headerlink" title="用多态来实现将 移动硬盘，U盘，MP3插到电脑上模拟读写数据"></a>用多态来实现将 移动硬盘，U盘，MP3插到电脑上模拟读写数据</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/24/KiB3zHoJnr9kGbS.png" alt="image-20210424112715470"></p><h4 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h4><p>可以抽象一个父类 可移动存储设备,名字为MoblieF</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MobileF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h4><p>三个子类分别为 MobileD MobileU MobileM</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MobileU</span> : <span class="title">MobileF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;U盘正在写入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;U盘正在读入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MobileD</span> : <span class="title">MobileF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;可移动硬盘正在写入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;可移动硬盘正在读入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MobileM</span> : <span class="title">MobileF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Mp3正在写入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Mp3正在读入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayMuisc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Muisc！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="电脑类"><a href="#电脑类" class="headerlink" title="电脑类"></a>电脑类</h4><p>有两种方式</p><ol><li><p>传参</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CpuRead</span>(<span class="params">MobileF mf</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        mf.Read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CpuWrite</span>(<span class="params">MobileF mf</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        mf.Write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建静态字段</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Computer1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> MobileF _mf;</span><br><span class="line">    <span class="keyword">public</span> MobileF Mf</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _mf; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _mf = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CpuWrite</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Mf.Write();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CpuRead</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Mf.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就像是一种标准，好比手机充电口有 type-c 标准的接口类似。我们使用关键字 <code>interface</code>来定义一个接口。</p><p>只要有一个类继承了一个接口，这个类就必须实现这个接口中所有的成员</p><p>语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[public] interface 接口名</span><br><span class="line">&#123;</span><br><span class="line">    成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>接口成员不允许添加修饰符，默认为 public。</p></li><li><p>接口中的方法不允许有方法体</p></li></ol><h3 id="接口与子类中方法的重名问题"><a href="#接口与子类中方法的重名问题" class="headerlink" title="接口与子类中方法的重名问题"></a>接口与子类中方法的重名问题</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IRun p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.Run();</span><br><span class="line">        Person pp = <span class="keyword">new</span> Person();</span><br><span class="line">        pp.Run();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">IRun</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;人类会跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> IRun.Run()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;接口中的跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRun</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*=====================结果======================*/</span></span><br><span class="line">接口中的跑步</span><br><span class="line">人类会跑步</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study</title>
      <link href="2021/04/09/Stduy/"/>
      <url>2021/04/09/Stduy/</url>
      
        <content type="html"><![CDATA[<h1 id="新的东西"><a href="#新的东西" class="headerlink" title="新的东西"></a>新的东西</h1><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ol><li><p>使用<code>#region</code>和<code>#endregion</code>实现几段代码的折叠</p></li><li><p>金钱类型：<code>decimal</code> 用来存储金钱，值后面需加上一个m</p></li><li><p><code>@</code>符号可以取消杠在字符串中的转义作用 如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;Hello\\world!&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">@&quot;Hello\world!&quot;</span>;</span><br><span class="line"><span class="comment">//这两个效果一致</span></span><br></pre></td></tr></table></figure></li><li><p>隐式类型转换</p><p>在满足一定条件后自动发生类型转换</p><p>例如：<code>int</code>和<code>double</code>兼容（都是数字类型），目标类型大于原类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 自动类型转换 int--&gt;double</span></span><br><span class="line"><span class="built_in">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">double</span> num = n;</span><br></pre></td></tr></table></figure></li><li><p>Convert类型转换</p><p>使用 <strong>Convert.to数据类型(变量名)</strong></p><p>如：<code>Convert.ToInt32(a)</code></p></li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="语法-逗号均为英文-："><a href="#语法-逗号均为英文-：" class="headerlink" title="语法**(逗号均为英文)**："></a>语法**(逗号均为英文)**：</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="built_in">enum</span> 枚举类型名</span><br><span class="line">&#123;</span><br><span class="line">    值<span class="number">1</span>,</span><br><span class="line">    值<span class="number">2</span>,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Gander wu = Gander.女;</span><br><span class="line">    Console.WriteLine(wu);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>枚举也是定义一个新的变量类型，如果定义的变量类型与数据类型不一致的话将会报错。如：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> wu = Gander.女;</span><br><span class="line">Console.WriteLine(wu);</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/10/DLrMOta8i6H2sf9.png" alt="image-20210410222727046"></p></li><li><p>枚举类型默认可以和<code>int</code>类型转换，转换结果有点类似于</p></li></ol><p>输出C语言中的数组下标，但你将值赋值的话，下标将会变成你赋值的数开始。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女,</span><br><span class="line">    秀吉</span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*---------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男=<span class="number">1</span>,</span><br><span class="line">    女,</span><br><span class="line">    秀吉=<span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">​```</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>同时<code>int</code>类型也能转换成枚举类型，注意枚举类型中没有这个数字这只会输出这个数字。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line"> 男,</span><br><span class="line">    女,</span><br><span class="line">    秀吉</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*---------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gander</span><br><span class="line">&#123;</span><br><span class="line">    男=<span class="number">1</span>,</span><br><span class="line">    女,</span><br><span class="line">    秀吉=<span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">Gander wu = Gander.男;</span><br><span class="line">Console.WriteLine(wu);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.男);</span><br><span class="line"></span><br><span class="line">Gander wu2 = Gander.秀吉;</span><br><span class="line">Console.WriteLine(wu2);</span><br><span class="line">Console.WriteLine((<span class="built_in">int</span>)Gander.秀吉);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">男</span></span><br><span class="line"><span class="comment">秀吉</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>C# 中结构类似于C语言的结构体，但在定义结构里的变量时需要加上<code>public</code>，否则将会无法使用</p><p>基本语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="keyword">struct</span> 结构名</span><br><span class="line">&#123;</span><br><span class="line">    字段;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span> _gander;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>基本语法：<code>数组类型[] 数组名=new 数组类型[数组长度];</code></p><p>如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种*/</span></span><br><span class="line"><span class="built_in">int</span>[] number = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*第二种*/</span></span><br><span class="line"><span class="built_in">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="out-参数"><a href="#out-参数" class="headerlink" title="out 参数"></a>out 参数</h2><p>基本语法：<code>out 变量类型 变量名</code></p><p>注意：传入参数的时候一定要加上<code>out</code>关键字</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetAll</span>(<span class="params"><span class="built_in">double</span>[] num,<span class="keyword">out</span> <span class="built_in">double</span> a,<span class="keyword">out</span> <span class="built_in">double</span> b,<span class="keyword">out</span> <span class="built_in">double</span> c,<span class="keyword">out</span> <span class="built_in">double</span> d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = num[<span class="number">0</span>];</span><br><span class="line">    b = num[<span class="number">1</span>];</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            b = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        c += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    d = c / num.Length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] num = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="built_in">double</span> max;</span><br><span class="line">    <span class="built_in">double</span> min;</span><br><span class="line">    <span class="built_in">double</span> sum;</span><br><span class="line">    <span class="built_in">double</span> avg;</span><br><span class="line">    GetAll(num,<span class="keyword">out</span> max,<span class="keyword">out</span> min,<span class="keyword">out</span> sum,<span class="keyword">out</span> avg);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;max=&#123;0&#125;,min=&#123;1&#125;,sum=&#123;2&#125;,avg=&#123;3&#125;&quot;</span>, max, min, sum, avg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ref-参数"><a href="#ref-参数" class="headerlink" title="ref 参数"></a>ref 参数</h2><p>刚接触感觉和C语言中的<strong>指针</strong>类似</p><p>注意：ref参数要求在方法外必须为其赋值，而方法内可以不赋值</p><p>使用方法 例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> n1 = <span class="number">10</span>, n2 = <span class="number">20</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;交换前n1=&#123;0&#125;,n2=&#123;1&#125;&quot;</span>, n1, n2);</span><br><span class="line">    MySwap(<span class="keyword">ref</span> n1, <span class="keyword">ref</span> n2);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;交换后n1=&#123;0&#125;,n2=&#123;1&#125;&quot;</span>, n1, n2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MySwap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a,<span class="keyword">ref</span> <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = a - b;</span><br><span class="line">    b = a + b;</span><br><span class="line">    a = b - a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h2><p>将实参列表中跟可变参数数组类型一致的元素都当作数组的元素去处理</p><p>具体实例见下方</p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>差不多就是多个方法可以定为同一个名字</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1.21</span>, <span class="number">6.12</span>));</span><br><span class="line">    Console.WriteLine(sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">sum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">double</span>[] num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i&lt; num.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">7.33</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Random的调用"><a href="#Random的调用" class="headerlink" title="Random的调用"></a>Random的调用</h2><h3 id="生成-？-？的随机数"><a href="#生成-？-？的随机数" class="headerlink" title="生成 ？~ ？的随机数"></a>生成 ？~ ？的随机数</h3><p>例如：生成1~6中的随机整数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random 变量 = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="built_in">int</span> rNumber = r.Next(<span class="number">1</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ol><li>public：公开的，在哪都能访问</li><li>private：私有的，只能在当前类的内部进行访问</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>visual studio 中比较常用的快捷键：</p><ol><li><code>Ctrl+K,C</code> 注释选定行</li><li><code>Ctrl+K,U</code>取消注释选定行</li><li><code>Ctrl+K,D</code>整理代码</li></ol><h1 id="值得注意的地方"><a href="#值得注意的地方" class="headerlink" title="值得注意的地方"></a>值得注意的地方</h1><h2 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h2><ol><li>C# 中 <code>char</code>表示为字符型且仅能使用<strong>单引号来赋值</strong></li></ol><p>​        <code>string</code>表示为字符串类型且仅能使用<strong>双引号来赋值</strong></p><ol start="2"><li>C# 中可以使用占位符来表示变量，使用方法有些类似与C语言中的<code>%d %s</code>等如：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> n2 = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> n3 = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数为&#123;0&#125;,第二个数为&#123;1&#125;,第三个数为&#123;2&#125;&quot;</span>,n1,n2,n3);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>C# 中没有全局变量，但可以使用<strong>静态字段</strong>来模拟全局变量</p><p>如：<code>public static int _num = 10;</code></p></li></ol><h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ol><li><code>Console.ReadLine()</code>为接收用户传入的东西，<strong>但无论用户输入的是什么都会变成字符串类型</strong></li><li><code>Console.Read()</code>：从输入流读入<strong>一个字符</strong>，至换行符结束</li><li><code>Console.ReadLine()</code>：从输入流读入<strong>一行字符</strong>，至换行符结束；</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ol><li><code>Console.Write()</code>：输出<strong>一行文本</strong>；</li><li><code>Console.WriteLine()</code>：输出<strong>一行文本</strong>，并在<strong>结尾处自动换行</strong>；</li></ol><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p>   使用 <code>Console.Clear();</code>清空当前全部内容</p><h3 id="Console-ReadKey"><a href="#Console-ReadKey" class="headerlink" title="Console.ReadKey()"></a>Console.ReadKey()</h3><p><code>Console.ReadKey()</code>中参数为<code>true</code>时随便输入的字符将不会显示在控制台上，参数为<code>false</code>或者不写时反之</p><h1 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h1><ol><li><p>Pascal 大小写</p><p>标识符中每个单词的首字母大写</p><p>用于<strong>类型名</strong>和<strong>成员名</strong></p><p>如：<code>CarDeck</code>,<code>DealersHand</code></p></li><li><p>Camel 大小写</p><p>出第一个单词意外，标识符中所有的单词都首字母大写</p><p>用于<strong>本地变量</strong>和<strong>方法参数</strong></p><p>如：<code>totalCycleCount</code>.<code>randomSeedParam</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="2021/04/07/hello%20C%20sharp/"/>
      <url>2021/04/07/hello%20C%20sharp/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-C"><a href="#Hello-C" class="headerlink" title="Hello C#"></a>Hello C#</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">myApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World! Hello C#&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;当前时间为：&quot;</span>+ DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化</title>
      <link href="2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
      <url>2021/03/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="更改公告内容-gif图片"><a href="#更改公告内容-gif图片" class="headerlink" title="更改公告内容+gif图片"></a>更改公告内容+gif图片</h1><p>在主题配置文件中搜索 card_announcement </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span> <span class="string">//公告内容</span></span><br></pre></td></tr></table></figure><p>更改后</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">欢迎来到yui1111的博客！&lt;img</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/rigodlee/BLOGCDN/img/20150404H5648_ZuzhL.gif&quot;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://imgtu.com/i/603iAU"><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/03/14/603iAU.png" alt="603iAU.png"></a></p><h1 id="更换头像与背景图像"><a href="#更换头像与背景图像" class="headerlink" title="更换头像与背景图像"></a>更换头像与背景图像</h1><p>打开主题配置文件，搜索<code>Avatar</code>往下一排全是关于博客头像背景图片之类的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 个人博客搭建</title>
      <link href="2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/03/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="会使用到的工具"><a href="#会使用到的工具" class="headerlink" title="会使用到的工具"></a>会使用到的工具</h2><ul><li><p>node.js</p></li><li><p>sublime</p></li><li><p>git</p></li></ul><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><p>首先我们首先在node.js的<a href="https://nodejs.org/zh-cn/download/">官网</a>下载</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHuC9.png" alt="1"></p><p>使用其他平台的用户可根据自己的需求下载哦（图片为Windows平台）</p><p>下载完成后，一路next就能安装成功。</p><h4 id="检查安装情况"><a href="#检查安装情况" class="headerlink" title="检查安装情况"></a>检查安装情况</h4><ul><li><strong>node.js</strong></li></ul><p>打开Windows 命令处理程序输入node -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHm4J.png" alt="2"></p><p>出现版本号即为安装成功</p><ul><li><strong>npm</strong></li></ul><p>继续在Windows 命令处理程序输入npm -v</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHABT.png" alt="3"></p><p>出现版本号即为安装成功</p><h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><p>直接到<a href="http://www.sublimetext.com/3">sublime官网</a>下载。建议安装在与博客文件同一文件夹中。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="下载和安装-1"><a href="#下载和安装-1" class="headerlink" title="下载和安装"></a>下载和安装</h4><ul><li><p><strong>下载</strong></p><p>下载git可直接去git**<a href="">官网</a>**下载。进入官网后点击download。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHMg1.png" alt="4"></p></li><li><p><strong>安装</strong></p></li></ul><ol><li><p>下载完成后打开进入此界面（因为我已经安装过git所以图中下面会多显示Only show new options ）</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHQjx.png" alt="5"></p></li><li><p>安装路径——选择自己想安装的位置就行。</p></li><li><p>安装git组件，图中框起来的为默认选中的组件，根据自己的需求勾选好后，选择下一步。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH1u6.png" alt="6"></p></li><li><p>菜单文件夹，直接选择默认就行。</p></li><li><p>选择git的默认编辑器</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH3DK.png" alt="7"></p></li><li><p>选择仓库的初始名称。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqH8HO.png" alt="8"></p></li><li><p>修改系统的环境变量</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHYUe.png" alt="9"></p></li><li><p>SSL的证书选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHt4H.png" alt="10"></p></li><li><p>配置行尾结束符，默认为unix格式，可根据自己的情况选择</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHUCd.png" alt="11"></p></li><li><p>配置终端仿真，建议第一个</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHa8A.png" alt="12"></p></li><li><p>其他配置，默认即可。</p></li><li><p>安装完成后点击鼠标右键会出现<strong>Git GUI Here</strong>和<strong>Git Bash Here</strong>两个选项</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHwvt.png" alt="13"></p></li></ol><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>在自己想安装hexo的位置新建一个叫blog的文件夹。创建完成后使用Windows命令窗口进入blog的文件夹中。</p><p>使用npm命令安装hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHdgI.png" alt="14"></p><p>安装完成后再输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog  &#x2F;&#x2F;blog可替换成你想要的名字</span><br></pre></td></tr></table></figure><p>进行初始化</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHBKP.png" alt="15"></p><p>出现 Start blogging with Hexo！即为成功。</p><p>进入第二个一创建好的blog文件夹，按顺序输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello Hexo&#x2F;&#x2F;新建一篇名为“hello Hexo”的博客</span><br><span class="line">hexo g&#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s&#x2F;&#x2F;本地部署预览</span><br></pre></td></tr></table></figure><p>完成后输入localhost:4000可进行本地访问。</p><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHJED.png" alt="16"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="GitHub仓库创建"><a href="#GitHub仓库创建" class="headerlink" title="GitHub仓库创建"></a>GitHub仓库创建</h3><p>首先要有一个GitHub的账号。</p><p>登录后点击左上角的new，创建新的仓库。进入仓库后输入仓库名称，必须要与owner下的名称一致，输入完成后即可（因为我之前已经创建过了仓库，所以提示）</p><p>​    <img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqHK3R.png" alt="17"></p><h3 id="GitHubSSH配置"><a href="#GitHubSSH配置" class="headerlink" title="GitHubSSH配置"></a>GitHubSSH配置</h3><p>打开git bash输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.email “xxx@qq.com“ &#x2F;&#x2F;填写注册github的邮箱</span><br><span class="line"></span><br><span class="line">git config –global user.name “xxxx” &#x2F;&#x2F;github 用户名</span><br><span class="line"></span><br><span class="line">ssh-keygen &#x2F;&#x2F;输入完这个就一致enter就行了</span><br></pre></td></tr></table></figure><p>完成后进入用户目录下的.ssh文件夹，打开id_rsa.pub，复制里面的内容。</p><p>进入GitHub，鼠标移动到右上角头像处，点击settings，之后再点击左边 SSH and GPG keys。创建一个新的SSH即可。</p><h3 id="Hexo与GitHub连接"><a href="#Hexo与GitHub连接" class="headerlink" title="Hexo与GitHub连接"></a>Hexo与GitHub连接</h3><p>在站点文件夹中打开_config.yml，将Deployment改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yui1111&#x2F;yui1111.github.io.git &#x2F;&#x2F;改为自己GitHub中的https链接</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2021/01/25/sqLBK1.png" alt="18"></p><p>将”url”后改为“<a href="https://github项目名&quot;/">https://github项目名&quot;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;yui1111.github.io &#x2F;&#x2F;改这个</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure><p>安装插件，上传博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">git config --global user.email &quot;github邮箱&quot;</span><br><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>输入网址如<a href="https://yui1111.github.io后等待一会即可进入./">https://yui1111.github.io后等待一会即可进入。</a></p><p>至此搭建过程结束。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
